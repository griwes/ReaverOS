/*
 * Copyright © 2021 Michał 'Griwes' Dominiak
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include "cstddef"
#include "cstdint"
#include "cwchar"

namespace std
{
template<typename _CharT>
struct char_traits;

template<>
struct char_traits<char>
{
    using char_type = char;
    using int_type = int;
    // using off_type = streamoff;
    // using pos_type = streampos;
    // using state_type = mbstate_t;
    // using comparison_category = strong_ordering;

    static constexpr void assign(char_type & __c1, const char_type & __c2) noexcept;

    static constexpr bool eq(char_type __c1, char_type __c2) noexcept
    {
        return __c1 == __c2;
    }

    static constexpr bool lt(char_type __c1, char_type __c2) noexcept
    {
        return __c1 < __c2;
    }

    static constexpr int compare(const char_type * __s1, const char_type * __s2, size_t __n)
    {
        for (size_t __i = 0; __i < __n; ++__i)
        {
            if (eq(__s1[__i], __s2[__i]))
            {
                continue;
            }

            if (lt(__s1[__i], __s2[__i]))
            {
                return -1;
            }

            return 1;
        }
        return 0;
    }

    static constexpr size_t length(const char_type * __s)
    {
        std::size_t __ret = 0;

        while (*__s++)
        {
            ++__ret;
        }

        return __ret;
    }

    static constexpr const char_type * find(const char_type * __s, size_t __n, const char_type & __a);
    static constexpr char_type * move(char_type * __s1, const char_type * __s2, size_t __n);
    static constexpr char_type * copy(char_type * __s1, const char_type * __s2, size_t __n);
    static constexpr char_type * assign(char_type * __s, size_t __n, char_type __a);

    static constexpr int_type not_eof(int_type __c) noexcept;
    static constexpr char_type to_char_type(int_type __c) noexcept;
    static constexpr int_type to_int_type(char_type __c) noexcept;
    static constexpr bool eq_int_type(int_type __c1, int_type __c2) noexcept;
    static constexpr int_type eof() noexcept;
};

template<>
struct char_traits<char8_t>
{
    using char_type = char8_t;
    using int_type = unsigned int;
    // using off_type = streamoff;
    // using pos_type = u8streampos;
    // using state_type = mbstate_t;
    // using comparison_category = strong_ordering;

    static constexpr void assign(char_type & __c1, const char_type & __c2) noexcept;
    static constexpr bool eq(char_type __c1, char_type __c2) noexcept;
    static constexpr bool lt(char_type __c1, char_type __c2) noexcept;

    static constexpr int compare(const char_type * __s1, const char_type * __s2, size_t __n);
    static constexpr size_t length(const char_type * __s);
    static constexpr const char_type * find(const char_type * __s, size_t __n, const char_type & __a);
    static constexpr char_type * move(char_type * __s1, const char_type * __s2, size_t __n);
    static constexpr char_type * copy(char_type * __s1, const char_type * __s2, size_t __n);
    static constexpr char_type * assign(char_type * __s, size_t __n, char_type __a);
    static constexpr int_type not_eof(int_type __c) noexcept;
    static constexpr char_type to_char_type(int_type __c) noexcept;
    static constexpr int_type to_int_type(char_type __c) noexcept;
    static constexpr bool eq_int_type(int_type __c1, int_type __c2) noexcept;
    static constexpr int_type eof() noexcept;
};

template<>
struct char_traits<char16_t>
{
    using char_type = char16_t;
    using int_type = uint_least16_t;
    // using off_type = streamoff;
    // using pos_type = u16streampos;
    // using state_type = mbstate_t;
    // using comparison_category = strong_ordering;

    static constexpr void assign(char_type & __c1, const char_type & __c2) noexcept;
    static constexpr bool eq(char_type __c1, char_type __c2) noexcept;
    static constexpr bool lt(char_type __c1, char_type __c2) noexcept;

    static constexpr int compare(const char_type * __s1, const char_type * __s2, size_t __n);
    static constexpr size_t length(const char_type * __s);
    static constexpr const char_type * find(const char_type * __s, size_t __n, const char_type & __a);
    static constexpr char_type * move(char_type * __s1, const char_type * __s2, size_t __n);
    static constexpr char_type * copy(char_type * __s1, const char_type * __s2, size_t __n);
    static constexpr char_type * assign(char_type * __s, size_t __n, char_type __a);

    static constexpr int_type not_eof(int_type __c) noexcept;
    static constexpr char_type to_char_type(int_type __c) noexcept;
    static constexpr int_type to_int_type(char_type __c) noexcept;
    static constexpr bool eq_int_type(int_type __c1, int_type __c2) noexcept;
    static constexpr int_type eof() noexcept;
};

template<>
struct char_traits<char32_t>
{
    using char_type = char32_t;
    using int_type = uint_least32_t;
    // using off_type = streamoff;
    // using pos_type = u32streampos;
    // using state_type = mbstate_t;
    // using comparison_category = strong_ordering;

    static constexpr void assign(char_type & __c1, const char_type & __c2) noexcept;
    static constexpr bool eq(char_type __c1, char_type __c2) noexcept;
    static constexpr bool lt(char_type __c1, char_type __c2) noexcept;

    static constexpr int compare(const char_type * __s1, const char_type * __s2, size_t __n);
    static constexpr size_t length(const char_type * __s);
    static constexpr const char_type * find(const char_type * __s, size_t __n, const char_type & __a);
    static constexpr char_type * move(char_type * __s1, const char_type * __s2, size_t __n);
    static constexpr char_type * copy(char_type * __s1, const char_type * __s2, size_t __n);
    static constexpr char_type * assign(char_type * __s, size_t __n, char_type __a);

    static constexpr int_type not_eof(int_type __c) noexcept;
    static constexpr char_type to_char_type(int_type __c) noexcept;
    static constexpr int_type to_int_type(char_type __c) noexcept;
    static constexpr bool eq_int_type(int_type __c1, int_type __c2) noexcept;
    static constexpr int_type eof() noexcept;
};

template<>
struct char_traits<wchar_t>
{
    using char_type = wchar_t;
    using int_type = wint_t;
    // using off_type = streamoff;
    // using pos_type = wstreampos;
    // using state_type = mbstate_t;
    // using comparison_category = strong_ordering;

    static constexpr void assign(char_type & __c1, const char_type & __c2) noexcept;
    static constexpr bool eq(char_type __c1, char_type __c2) noexcept;
    static constexpr bool lt(char_type __c1, char_type __c2) noexcept;

    static constexpr int compare(const char_type * __s1, const char_type * __s2, size_t __n);
    static constexpr size_t length(const char_type * __s);
    static constexpr const char_type * find(const char_type * __s, size_t __n, const char_type & __a);
    static constexpr char_type * move(char_type * __s1, const char_type * __s2, size_t __n);
    static constexpr char_type * copy(char_type * __s1, const char_type * __s2, size_t __n);
    static constexpr char_type * assign(char_type * __s, size_t __n, char_type __a);

    static constexpr int_type not_eof(int_type __c) noexcept;
    static constexpr char_type to_char_type(int_type __c) noexcept;
    static constexpr int_type to_int_type(char_type __c) noexcept;
    static constexpr bool eq_int_type(int_type __c1, int_type __c2) noexcept;
    static constexpr int_type eof() noexcept;
};
}

// vim: ft=cpp
