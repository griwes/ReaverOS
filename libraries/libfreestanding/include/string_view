/*
 * Copyright © 2021 Michał 'Griwes' Dominiak
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include "__char_traits"
#include "cstddef"
#include "iterator"
#include "memory"

namespace std
{
template<typename _CharT, typename _Traits = char_traits<_CharT>>
class basic_string_view
{
public:
    using traits_type = _Traits;
    using value_type = _CharT;
    using pointer = value_type *;
    using const_pointer = const value_type *;
    using reference = value_type &;
    using const_reference = const value_type &;
    using const_iterator = void; // see [string.view.iterators]
    using iterator = const_iterator;
    // using const_reverse_iterator = reverse_iterator<const_iterator>;
    // using reverse_iterator = const_reverse_iterator;
    using size_type = size_t;
    using difference_type = ptrdiff_t;
    static constexpr size_type npos = size_type(-1);

    constexpr basic_string_view() noexcept;
    constexpr basic_string_view(const basic_string_view &) noexcept = default;
    constexpr basic_string_view & operator=(const basic_string_view &) noexcept = default;

    constexpr basic_string_view(const _CharT * __str) : __data(__str), __size(_Traits::length(__str))
    {
    }

    constexpr basic_string_view(const _CharT * __str, size_type __len) : __data(__str), __size(__len)
    {
    }

    // template<class It, class End>
    // constexpr basic_string_view(It begin, End end);

    constexpr const_iterator begin() const noexcept;
    constexpr const_iterator end() const noexcept;
    constexpr const_iterator cbegin() const noexcept;
    constexpr const_iterator cend() const noexcept;
    // constexpr const_reverse_iterator rbegin() const noexcept;
    // constexpr const_reverse_iterator rend() const noexcept;
    // constexpr const_reverse_iterator crbegin() const noexcept;
    // constexpr const_reverse_iterator crend() const noexcept;

    constexpr size_type size() const noexcept
    {
        return __size;
    }

    constexpr size_type length() const noexcept
    {
        return __size;
    }

    constexpr size_type max_size() const noexcept;
    [[nodiscard]] constexpr bool empty() const noexcept;

    constexpr const_reference operator[](size_type __pos) const
    {
        return __data[__pos];
    }

    constexpr const_reference at(size_type __pos) const;
    constexpr const_reference front() const;
    constexpr const_reference back() const;
    constexpr const_pointer data() const noexcept;

    constexpr void remove_prefix(size_type __n)
    {
        __data += __n;
        __size -= __n;
    }

    constexpr void remove_suffix(size_type __n)
    {
        __size -= __n;
    }

    constexpr void swap(basic_string_view & __s) noexcept;

    constexpr size_type copy(_CharT * __s, size_type __n, size_type __pos = 0) const;

    constexpr basic_string_view substr(size_type __pos = 0, size_type __n = npos) const;

    constexpr int compare(basic_string_view __s) const noexcept
    {
        auto __rlen = __size < __s.__size ? __size : __s.__size;
        auto __traits_result = _Traits::compare(__data, __s.__data, __rlen);
        if (__traits_result == 0)
        {
            return !!__size - !!__s.__size;
        }
        return __traits_result;
    }

    constexpr int compare(size_type __pos1, size_type __n1, basic_string_view __s) const;
    constexpr int compare(
        size_type __pos1,
        size_type __n1,
        basic_string_view __s,
        size_type __pos2,
        size_type __n2) const;
    constexpr int compare(const _CharT * __s) const;
    constexpr int compare(size_type __pos1, size_type __n1, const _CharT * __s) const;
    constexpr int compare(size_type __pos1, size_type __n1, const _CharT * __s, size_type __n2) const;

    constexpr bool starts_with(basic_string_view __x) const noexcept;
    constexpr bool starts_with(_CharT __x) const noexcept;
    constexpr bool starts_with(const _CharT * __x) const;
    constexpr bool ends_with(basic_string_view __x) const noexcept;
    constexpr bool ends_with(_CharT __x) const noexcept;
    constexpr bool ends_with(const _CharT * __x) const;

    constexpr bool contains(basic_string_view __x) const noexcept;
    constexpr bool contains(_CharT __x) const noexcept;
    constexpr bool contains(const _CharT * __x) const;

    constexpr size_type find(basic_string_view __s, size_type __pos = 0) const noexcept;

    constexpr size_type find(_CharT __c, size_type __pos = 0) const noexcept
    {
        for (size_type __i = 0; __i < __size; ++__i)
        {
            if (__data[__i] == __c)
            {
                return __i;
            }
        }

        return npos;
    }

    constexpr size_type find(const _CharT * __s, size_type __pos, size_type __n) const;
    constexpr size_type find(const _CharT * __s, size_type __pos = 0) const;
    constexpr size_type rfind(basic_string_view __s, size_type __pos = npos) const noexcept;
    constexpr size_type rfind(_CharT __c, size_type __pos = npos) const noexcept;
    constexpr size_type rfind(const _CharT * __s, size_type __pos, size_type __n) const;
    constexpr size_type rfind(const _CharT * __s, size_type __pos = npos) const;

    constexpr size_type find_first_of(basic_string_view __s, size_type __pos = 0) const noexcept;
    constexpr size_type find_first_of(_CharT __c, size_type __pos = 0) const noexcept;
    constexpr size_type find_first_of(const _CharT * __s, size_type __pos, size_type __n) const;
    constexpr size_type find_first_of(const _CharT * __s, size_type __pos = 0) const;
    constexpr size_type find_last_of(basic_string_view __s, size_type __pos = npos) const noexcept;
    constexpr size_type find_last_of(_CharT __c, size_type __pos = npos) const noexcept;
    constexpr size_type find_last_of(const _CharT * __s, size_type __pos, size_type __n) const;
    constexpr size_type find_last_of(const _CharT * __s, size_type __pos = npos) const;

    constexpr size_type find_first_not_of(basic_string_view __s, size_type __pos = 0) const noexcept
    {
        for (; __pos < __size; ++__pos)
        {
            bool __found = false;
            for (size_t __i = 0; __i < __s.__size; ++__i)
            {
                if (_Traits::eq(__data[__pos], __s.__data[__i]))
                {
                    __found = true;
                    break;
                }
            }

            if (!__found)
            {
                return __pos;
            }
        }

        return npos;
    }

    constexpr size_type find_first_not_of(_CharT __c, size_type __pos = 0) const noexcept
    {
        return find_first_not_of(basic_string_view(addressof(__c), 1), __pos);
    }

    constexpr size_type find_first_not_of(const _CharT * __s, size_type __pos, size_type __n) const;
    constexpr size_type find_first_not_of(const _CharT * __s, size_type __pos = 0) const;
    constexpr size_type find_last_not_of(basic_string_view __s, size_type __pos = npos) const noexcept;
    constexpr size_type find_last_not_of(_CharT __c, size_type __pos = npos) const noexcept;
    constexpr size_type find_last_not_of(const _CharT * __s, size_type __pos, size_type __n) const;
    constexpr size_type find_last_not_of(const _CharT * __s, size_type __pos = npos) const;

private:
    const_pointer __data;
    size_type __size;
};

template<typename _It, typename _End>
basic_string_view(_It, _End) -> basic_string_view<iter_value_t<_It>>;

template<typename _CharT, typename _Traits>
constexpr bool operator==(
    basic_string_view<_CharT, _Traits> __lhs,
    basic_string_view<_CharT, _Traits> __rhs) noexcept
{
    return __lhs.compare(__rhs) == 0;
}
template<typename _CharT, typename _Traits>
constexpr bool operator==(
    basic_string_view<_CharT, _Traits> __lhs,
    type_identity_t<basic_string_view<_CharT, _Traits>> __rhs) noexcept
{
    return __lhs.compare(__rhs) == 0;
}

template<typename _CharT, typename _Traits>
constexpr auto operator<=>(
    basic_string_view<_CharT, _Traits> __x,
    basic_string_view<_CharT, _Traits> __y) noexcept;

using string_view = basic_string_view<char>;
using u8string_view = basic_string_view<char8_t>;
using u16string_view = basic_string_view<char16_t>;
using u32string_view = basic_string_view<char32_t>;
using wstring_view = basic_string_view<wchar_t>;

inline namespace literals
{
    inline namespace string_view_literals
    {
        constexpr string_view operator""sv(const char * __str, size_t __len) noexcept;
        constexpr u8string_view operator""sv(const char8_t * __str, size_t __len) noexcept;
        constexpr u16string_view operator""sv(const char16_t * __str, size_t __len) noexcept;
        constexpr u32string_view operator""sv(const char32_t * __str, size_t __len) noexcept;
        constexpr wstring_view operator""sv(const wchar_t * __str, size_t __len) noexcept;
    }
}
}

// vim: ft=cpp
