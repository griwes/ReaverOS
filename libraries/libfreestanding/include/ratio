/*
 * Copyright © 2021 Michał 'Griwes' Dominiak
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include "cstdint"
#include "version"

namespace std
{
constexpr intmax_t __gcd(intmax_t __a, intmax_t __b)
{
    auto __old_a = __a;
    auto __old_b = __b;

    while (__b)
    {
        __a = __old_b;
        __b = __old_a % __old_b;

        __old_a = __a;
        __old_b = __b;
    }

    return __a;
}

constexpr intmax_t __lcm(intmax_t __a, intmax_t __b)
{
    auto ret = (__a / __gcd(__a, __b)) * __b;
    if (ret < 0)
    {
        ret = -ret;
    }

    return ret;
}

template<intmax_t _N, intmax_t _D = 1>
class ratio
{
public:
    static constexpr intmax_t num = _N / __gcd(_N, _D);
    static constexpr intmax_t den = _D / __gcd(_N, _D);
    using type = ratio<num, den>;
};

template<class _R1, class _R2>
using ratio_add = ratio<_R1::num * _R2::den + _R2::num * _R1::den, _R1::den * _R2::den>;

template<class _R1, class _R2>
using ratio_subtract = ratio<_R1::num * _R2::den - _R2::num * _R1::den, _R1::den * _R2::den>;

template<class _R1, class _R2>
using ratio_multiply = ratio<_R1::num * _R2::num, _R1::den * _R2::den>;

template<class _R1, class _R2>
using ratio_divide = ratio<_R1::num * _R2::den, _R1::den * _R2::num>;

template<class _R1, class _R2>
struct ratio_equal;
template<class _R1, class _R2>
struct ratio_not_equal;
template<class _R1, class _R2>
struct ratio_less;
template<class _R1, class _R2>
struct ratio_less_equal;
template<class _R1, class _R2>
struct ratio_greater;
template<class _R1, class _R2>
struct ratio_greater_equal;

template<class _R1, class _R2>
inline constexpr bool ratio_equal_v = ratio_equal<_R1, _R2>::value;
template<class _R1, class _R2>
inline constexpr bool ratio_not_equal_v = ratio_not_equal<_R1, _R2>::value;
template<class _R1, class _R2>
inline constexpr bool ratio_less_v = ratio_less<_R1, _R2>::value;
template<class _R1, class _R2>
inline constexpr bool ratio_less_equal_v = ratio_less_equal<_R1, _R2>::value;
template<class _R1, class _R2>
inline constexpr bool ratio_greater_v = ratio_greater<_R1, _R2>::value;
template<class _R1, class _R2>
inline constexpr bool ratio_greater_equal_v = ratio_greater_equal<_R1, _R2>::value;

using yocto = ratio<1, static_cast<__int128>(1'000'000'000'000'000'000) * 1'000'000>;
using zepto = ratio<1, static_cast<__int128>(1'000'000'000'000'000'000) * 1'000>;
using atto = ratio<1, 1'000'000'000'000'000'000>;
using femto = ratio<1, 1'000'000'000'000'000>;
using pico = ratio<1, 1'000'000'000'000>;
using nano = ratio<1, 1'000'000'000>;
using micro = ratio<1, 1'000'000>;
using milli = ratio<1, 1'000>;
using centi = ratio<1, 100>;
using deci = ratio<1, 10>;
using deca = ratio<10, 1>;
using hecto = ratio<100, 1>;
using kilo = ratio<1'000, 1>;
using mega = ratio<1'000'000, 1>;
using giga = ratio<1'000'000'000, 1>;
using tera = ratio<1'000'000'000'000, 1>;
using peta = ratio<1'000'000'000'000'000, 1>;
using exa = ratio<1'000'000'000'000'000'000, 1>;
using zetta = ratio<static_cast<__int128>(1'000'000'000'000'000'000) * 1'000, 1>;
using yotta = ratio<static_cast<__int128>(1'000'000'000'000'000'000) * 1'000'000, 1>;
}

// vim: ft=cpp
