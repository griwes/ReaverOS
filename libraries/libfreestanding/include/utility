/*
 * Copyright © 2021 Michał 'Griwes' Dominiak
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include "cstddef"
#include "type_traits"
#include "version"

namespace std
{
// template<typename _T>
// constexpr void swap(T & a, T & b) noexcept(see below);
template<typename _T, size_t _N>
constexpr void swap(_T (&__a)[_N], _T (&__b)[_N]) noexcept(is_nothrow_swappable_v<_T>);

template<typename _T>
constexpr _T && forward(remove_reference_t<_T> & __t) noexcept
{
    return static_cast<_T &&>(__t);
}

template<typename _T>
constexpr _T && forward(remove_reference_t<_T> && __t) noexcept
{
    static_assert(!is_lvalue_reference<_T>::value, "can not forward an rvalue as an lvalue");

    return static_cast<_T &&>(__t);
}

template<typename _T>
constexpr remove_reference_t<_T> && move(_T && __t) noexcept
{
    return static_cast<remove_reference_t<_T> &&>(__t);
}

template<typename _T, typename _U = _T>
constexpr _T exchange(_T & __obj, _U && __new_val)
{
    _T __ret = move(__obj);
    __obj = forward<_U>(__new_val);
    return __ret;
}

template<typename _T>
constexpr conditional_t<
    !is_nothrow_move_constructible_v<_T> && is_copy_constructible_v<_T>,
    const _T &,
    _T &&>
move_if_noexcept(_T & __x) noexcept;

template<typename _T>
constexpr add_const_t<_T> & as_const(_T & __t) noexcept;
template<typename _T>
void as_const(const _T &&) = delete;

template<typename _T, typename _U>
constexpr bool cmp_equal(_T __t, _U __u) noexcept;
template<typename _T, typename _U>
constexpr bool cmp_not_equal(_T __t, _U __u) noexcept;

template<typename _T, typename _U>
constexpr bool cmp_less(_T __t, _U __u) noexcept;
template<typename _T, typename _U>
constexpr bool cmp_greater(_T __t, _U __u) noexcept;
template<typename _T, typename _U>
constexpr bool cmp_less_equal(_T __t, _U __u) noexcept;
template<typename _T, typename _U>
constexpr bool cmp_greater_equal(_T __t, _U __u) noexcept;

template<typename _R, typename _T>
constexpr bool in_range(_T __t) noexcept;

template<typename _T, _T... _I>
struct integer_sequence
{
    using value_type = _T;
    static constexpr std::size_t size()
    {
        return sizeof...(_I);
    }
};

template<size_t... _I>
using index_sequence = integer_sequence<size_t, _I...>;

template<typename _T, _T _N>
using make_integer_sequence = __make_integer_seq<integer_sequence, _T, _N>;
template<size_t _N>
using make_index_sequence = make_integer_sequence<size_t, _N>;

template<typename... _T>
using index_sequence_for = make_index_sequence<sizeof...(_T)>;

template<typename _T1, typename _T2>
struct pair;

template<typename _T1, typename _T2>
constexpr bool operator==(const pair<_T1, _T2> &, const pair<_T1, _T2> &);
// template<typename _T1, typename _T2>
// constexpr common_comparison_category_t<synth - three - way - result<T1>, synth - three - way - result<T2>>
// operator<=>(const pair<T1, T2> &, const pair<T1, T2> &);

template<typename _T1, typename _T2>
constexpr void swap(pair<_T1, _T2> & __x, pair<_T1, _T2> & __y) noexcept(noexcept(__x.swap(__y)));

// template<typename _T1, typename _T2>
// constexpr see below make_pair(T1 &&, T2 &&);

template<typename _T>
struct tuple_size;
template<size_t _I, typename _T>
struct tuple_element;

template<typename _T1, typename _T2>
struct tuple_size<pair<_T1, _T2>>;
template<size_t _I, typename _T1, typename _T2>
struct tuple_element<_I, pair<_T1, _T2>>;

// template<size_t I, typename _T1, typename _T2>
// constexpr tuple_element_t<I, pair<T1, T2>> & get(pair<T1, T2> &) noexcept;
// template<size_t I, typename _T1, typename _T2>
// constexpr tuple_element_t<I, pair<T1, T2>> && get(pair<T1, T2> &&) noexcept;
// template<size_t I, typename _T1, typename _T2>
// constexpr const tuple_element_t<I, pair<T1, T2>> & get(const pair<T1, T2> &) noexcept;
// template<size_t I, typename _T1, typename _T2>
// constexpr const tuple_element_t<I, pair<T1, T2>> && get(const pair<T1, T2> &&) noexcept;
template<typename _T1, typename _T2>
constexpr _T1 & get(pair<_T1, _T2> & __p) noexcept;
template<typename _T1, typename _T2>
constexpr const _T1 & get(const pair<_T1, _T2> & __p) noexcept;
template<typename _T1, typename _T2>
constexpr _T1 && get(pair<_T1, _T2> && __p) noexcept;
template<typename _T1, typename _T2>
constexpr const _T1 && get(const pair<_T1, _T2> && __p) noexcept;
template<typename _T2, typename _T1>
constexpr _T2 & get(pair<_T1, _T2> & __p) noexcept;
template<typename _T2, typename _T1>
constexpr const _T2 & get(const pair<_T1, _T2> & __p) noexcept;
template<typename _T2, typename _T1>
constexpr _T2 && get(pair<_T1, _T2> && __p) noexcept;
template<typename _T2, typename _T1>
constexpr const _T2 && get(const pair<_T1, _T2> && __p) noexcept;

struct piecewise_construct_t
{
    explicit piecewise_construct_t() = default;
};
inline constexpr piecewise_construct_t piecewise_construct{};
template<typename... _Types>
class tuple;

struct in_place_t
{
    explicit in_place_t() = default;
};
inline constexpr in_place_t in_place{};

template<typename _T>
struct in_place_type_t
{
    explicit in_place_type_t() = default;
};
template<typename _T>
inline constexpr in_place_type_t<_T> in_place_type{};

template<size_t _I>
struct in_place_index_t
{
    explicit in_place_index_t() = default;
};
template<size_t _I>
inline constexpr in_place_index_t<_I> in_place_index{};

}

// vim: ft=cpp
