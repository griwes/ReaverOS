/*
 * Copyright © 2021-2022 Michał 'Griwes' Dominiak
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include "__config"
#include "concepts"
#include "type_traits"
#include "utility"
#include "version"

__ROSESTD_OPEN

struct input_iterator_tag
{
};

struct output_iterator_tag
{
};

struct forward_iterator_tag : public input_iterator_tag
{
};

struct bidirectional_iterator_tag : public forward_iterator_tag
{
};

struct random_access_iterator_tag : public bidirectional_iterator_tag
{
};

struct contiguous_iterator_tag : public random_access_iterator_tag
{
};

template<typename _T>
using __with_reference = _T &;

template<typename _T>
concept __can_reference = requires
{
    typename __with_reference<_T>;
};

template<typename _T>
concept __dereferenceable = requires(_T & __t)
{
    {
        *__t
        } -> __can_reference;
};

template<class>
struct incrementable_traits
{
};

template<typename _T>
requires is_object_v<_T>
struct incrementable_traits<_T *>
{
    using difference_type = ptrdiff_t;
    using __primary_template = incrementable_traits;
};

template<typename _I>
struct incrementable_traits<const _I> : incrementable_traits<_I>
{
};

template<typename _T>
requires requires
{
    typename _T::difference_type;
}
struct incrementable_traits<_T>
{
    using difference_type = typename _T::difference_type;
};

template<typename _T>
requires (!requires { typename _T::difference_type; } &&
              requires(const _T& __a, const _T& __b) { { __a - __b } -> integral; })
  struct incrementable_traits<_T>
{
    using difference_type = make_signed_t<decltype(declval<_T>() - declval<_T>())>;
};

template<class>
struct __cond_value_type
{
};

template<typename _T>
requires is_object_v<_T>
struct __cond_value_type<_T>
{
    using value_type = remove_cv_t<_T>;
};

template<typename _T>
concept __has_member_value_type = requires
{
    typename _T::value_type;
};

template<typename _T>
concept __has_member_element_type = requires
{
    typename _T::element_type;
};

template<class>
struct indirectly_readable_traits
{
};

template<typename _T>
struct indirectly_readable_traits<_T *> : __cond_value_type<_T>
{
};

template<typename _I>
requires is_array_v<_I>
struct indirectly_readable_traits<_I>
{
    using value_type = remove_cv_t<remove_extent_t<_I>>;
};

template<typename _I>
struct indirectly_readable_traits<const _I> : indirectly_readable_traits<_I>
{
};

template<typename _T>
requires __has_member_value_type<_T>
struct indirectly_readable_traits<_T> : __cond_value_type<typename _T::value_type>
{
};

template<typename _T>
requires __has_member_element_type<_T>
struct indirectly_readable_traits<_T> : __cond_value_type<typename _T::element_type>
{
};

template<typename _T>
requires __has_member_element_type<_T> && __has_member_value_type<_T>
struct indirectly_readable_traits<_T>
{
};

template<typename _T>
requires __has_member_value_type<_T> && __has_member_element_type<
    _T> && same_as<remove_cv_t<typename _T::element_type>, remove_cv_t<typename _T::value_type>>
struct indirectly_readable_traits<_T> : __cond_value_type<typename _T::value_type>
{
};

template<typename _T>
requires __dereferenceable<_T>
using iter_reference_t = decltype(*declval<_T &>());

template<typename _I>
struct iterator_traits;

template<typename _T>
requires is_object_v<_T>
struct iterator_traits<_T *>
{
    using iterator_concept = contiguous_iterator_tag;
    using iterator_category = random_access_iterator_tag;
    using value_type = remove_cv_t<_T>;
    using difference_type = ptrdiff_t;
    using pointer = _T *;
    using reference = _T &;
};

template<typename _I>
concept __iterator_traits_base = requires
{
    typename _I::difference_type;
    typename _I::value_type;
    typename _I::reference;
    typename _I::iterator_category;
};

template<typename _I>
struct __iterator_pointer
{
    using type = void;
};

template<typename _I>
requires requires
{
    typename _I::pointer;
}
struct __iterator_pointer<_I>
{
    using type = typename _I::pointer;
};

template<typename _I>
requires __iterator_traits_base<_I>
struct iterator_traits<_I>
{
    using iterator_category = typename _I::iterator_category;
    using value_type = typename _I::value_type;
    using difference_type = typename _I::difference_type;
    using pointer = typename __iterator_pointer<_I>::type;
    using reference = typename _I::reference;
};

template<typename _I>
concept __cpp17_iterator = copyable<_I> && requires(_I __i)
{
    {
        *__i
        } -> __can_reference;
    {
        ++__i
        } -> same_as<_I &>;
    {
        *__i++
        } -> __can_reference;
};

template<typename _I>
concept __cpp17_input_iterator = __cpp17_iterator<_I> && equality_comparable<_I> && requires(_I __i)
{
    typename incrementable_traits<_I>::difference_type;
    typename indirectly_readable_traits<_I>::value_type;
    typename common_reference_t<
        iter_reference_t<_I> &&,
        typename indirectly_readable_traits<_I>::value_type &>;
    typename common_reference_t<decltype(*__i++) &&, typename indirectly_readable_traits<_I>::value_type &>;
    requires signed_integral<typename incrementable_traits<_I>::difference_type>;
};

template<typename _I>
struct __cpp17_iterator_pointer
{
    using type = void;
};

template<typename _I>
concept __cpp17_iterator_pointer_c = requires
{
    typename _I::pointer;
};

template<typename _I>
requires __cpp17_iterator_pointer_c<_I>
struct __cpp17_iterator_pointer<_I>
{
    using type = typename _I::pointer;
};

template<typename _I>
requires(!__cpp17_iterator_pointer_c<_I> && requires {
    declval<_I &>().operator->();
}) struct __cpp17_iterator_pointer<_I>
{
    using type = decltype(declval<_I &>().operator->());
};

template<typename _I>
struct __cpp17_iterator_reference
{
    using type = iter_reference_t<_I>;
};

template<typename _I>
requires requires
{
    typename _I::reference;
}
struct __cpp17_iterator_reference<_I>
{
    using type = typename _I::reference;
};

template<typename _I>
concept __cpp17_forward_iterator = __cpp17_input_iterator<_I> && constructible_from<
                                       _I> && is_lvalue_reference_v<iter_reference_t<_I>> && same_as
    < remove_cvref_t<iter_reference_t<_I>>,
typename indirectly_readable_traits<_I>::value_type > &&requires(_I __i)
{
    {
        __i++
        } -> convertible_to<const _I &>;
    {
        *__i++
        } -> same_as<iter_reference_t<_I>>;
};

template<typename _I>
concept __cpp17_bidirectional_iterator = __cpp17_forward_iterator<_I> && requires(_I __i)
{
    {
        --__i
        } -> same_as<_I &>;
    {
        __i--
        } -> convertible_to<const _I &>;
    {
        *__i--
        } -> same_as<iter_reference_t<_I>>;
};

template<typename _I>
concept __cpp17_random_access_iterator =
    __cpp17_bidirectional_iterator<_I> && totally_ordered<_I> && requires(
        _I __i,
        typename incrementable_traits<_I>::difference_type __n)
{
    {
        __i += __n
        } -> same_as<_I &>;
    {
        __i -= __n
        } -> same_as<_I &>;
    {
        __i + __n
        } -> same_as<_I>;
    {
        __n + __i
        } -> same_as<_I>;
    {
        __i - __n
        } -> same_as<_I>;
    {
        __i - __i
        } -> same_as<decltype(__n)>;
    {
        __i[__n]
        } -> convertible_to<iter_reference_t<_I>>;
};

template<typename _I>
concept __has_member_iterator_category = requires
{
    typename _I::iterator_category;
};

template<typename _I>
struct __cpp17_iterator_category
{
    using type = input_iterator_tag;
};

template<typename _I>
requires __has_member_iterator_category<_I>
struct __cpp17_iterator_category<_I>
{
    using type = typename _I::iterator_category;
};

template<typename _I>
requires(
    !__has_member_iterator_category<_I> && __cpp17_forward_iterator<_I>) struct __cpp17_iterator_category<_I>
{
    using type = forward_iterator_tag;
};

template<typename _I>
requires(
    !__has_member_iterator_category<
        _I> && __cpp17_bidirectional_iterator<_I>) struct __cpp17_iterator_category<_I>
{
    using type = bidirectional_iterator_tag;
};

template<typename _I>
requires(
    !__has_member_iterator_category<
        _I> && __cpp17_random_access_iterator<_I>) struct __cpp17_iterator_category<_I>
{
    using type = random_access_iterator_tag;
};

template<typename _I>
requires(!__iterator_traits_base<_I> && __cpp17_input_iterator<_I>) struct iterator_traits<_I>
{
    using iterator_category = typename __cpp17_iterator_category<_I>::type;
    using value_type = typename indirectly_readable_traits<_I>::value_type;
    using difference_type = typename incrementable_traits<_I>::difference_type;
    using pointer = typename __cpp17_iterator_pointer<_I>::type;
    using reference = typename __cpp17_iterator_reference<_I>::type;
};

template<typename _I>
struct __cpp17_iterator_difference_type
{
    using type = void;
};

template<typename _I>
requires requires
{
    typename _I::difference_type;
}
struct __cpp17_iterator_difference_type<_I>
{
    using type = typename _I::difference_type;
};

template<typename _I>
requires(!__iterator_traits_base<_I> && __cpp17_iterator<_I>) struct iterator_traits<_I>
{
    using iterator_category = output_iterator_tag;
    using value_type = void;
    using difference_type = typename __cpp17_iterator_difference_type<_I>::type;
    using pointer = void;
    using reference = void;
};

template<typename _T>
struct __iter_difference
{
    using type = typename iterator_traits<remove_cvref_t<_T>>::difference_type;
};

template<typename _T>
requires __primary_template<iterator_traits<remove_cvref_t<_T>>>
struct __iter_difference<_T>
{
    using type = typename incrementable_traits<remove_cvref_t<_T>>::difference_type;
};

template<typename _T>
using iter_difference_t = typename __iter_difference<_T>::type;

template<typename _T>
struct __iter_value
{
    using type = typename iterator_traits<remove_cvref_t<_T>>::value_type;
};

template<typename _T>
requires __primary_template<iterator_traits<remove_cvref_t<_T>>>
struct __iter_value<_T>
{
    using type = typename indirectly_readable_traits<remove_cvref<_T>>::value_type;
};

template<typename _T>
using iter_value_t = typename __iter_value<_T>::type;

namespace ranges
{
inline namespace __iter_move_swap_ns
{
    namespace __iter_move_adl_poison
    {
        void iter_move();

        template<typename _E>
        concept __is_iter_move_valid = requires(_E && __e)
        {
            iter_move(__ROSESTD::forward<_E>(__e));
        };

        template<typename _E>
        constexpr decltype(auto) __iter_move(_E && __e)
        {
            return iter_move(__ROSESTD::forward<_E>(__e));
        }
    }

    struct __iter_move_cpo
    {
        template<typename _E>
        requires(__is_class(remove_cvref_t<_E>) || __is_enum(remove_cvref_t<_E>))
            && __iter_move_adl_poison::__is_iter_move_valid<_E> constexpr decltype(auto) operator()(
                _E && __e) const noexcept(noexcept(__iter_move_adl_poison::__iter_move(__e)))
        {
            return __iter_move_adl_poison::__iter_move(__ROSESTD::forward<_E>(__e));
        }

        template<typename _E>
        requires(
            !((__is_class(remove_cvref_t<_E>) || __is_enum(remove_cvref_t<_E>))
              && __iter_move_adl_poison::__is_iter_move_valid<_E>)&&requires(_E && __e)
            { *__ROSESTD::forward<_E>(__e); }) constexpr decltype(auto)
        operator()(_E && __e) const noexcept(noexcept(*__ROSESTD::forward<_E>(__e)))
        {
            if constexpr (is_lvalue_reference_v<_E>)
            {
                return __ROSESTD::move(*__ROSESTD::forward<_E>(__e));
            }
            else
            {
                return *__ROSESTD::forward<_E>(__e);
            };
        }
    };

    inline constexpr __iter_move_cpo iter_move;

    /*
    inline constexpr struct __iter_swap
    {
    } iter_swap;
    */
}
}

template<__dereferenceable _T>
requires requires(_T & __t)
{
    {
        ranges::iter_move(__t)
        } -> __can_reference;
}
using iter_rvalue_reference_t = decltype(ranges::iter_move(declval<_T &>()));

template<typename _In>
concept __indirectly_readable_impl = requires(const _In __in)
{
    typename iter_value_t<_In>;
    typename iter_reference_t<_In>;
    typename iter_rvalue_reference_t<_In>;
    {
        *__in
        } -> same_as<iter_reference_t<_In>>;
    {
        ranges::iter_move(__in)
        } -> same_as<iter_rvalue_reference_t<_In>>;
}
&&common_reference_with<iter_reference_t<_In> &&, iter_value_t<_In> &> &&
    common_reference_with<iter_reference_t<_In> &&, iter_rvalue_reference_t<_In> &&> &&
        common_reference_with<iter_rvalue_reference_t<_In> &&, const iter_value_t<_In> &>;

template<typename _In>
concept indirectly_readable = __indirectly_readable_impl<remove_cvref_t<_In>>;

/*
template<indirectly_­readable T>
using iter_common_reference_t = common_reference_t<iter_reference_t<T>, iter_value_t<T> &>;
*/

template<typename _Out, typename _T>
concept indirectly_writable = requires(_Out && __o, _T && __t)
{
    *__o = __ROSESTD::forward<_T>(__t);
    *__ROSESTD::forward<_Out>(__o) = __ROSESTD::forward<_T>(__t);
    const_cast<const iter_reference_t<_Out> &&>(*__o) = __ROSESTD::forward<_T>(__t);
    const_cast<const iter_reference_t<_Out> &&>(*__ROSESTD::forward<_Out>(__o)) = __ROSESTD::forward<_T>(__t);
};

// TODO: take integer-class types into account in the two traits below

template<typename _I>
concept __is_integer_like = integral<_I>;

template<typename _I>
concept __is_signed_integer_like = signed_integral<_I>;

template<typename _I>
concept weakly_incrementable = default_initializable<_I> && movable<_I> && requires(_I __i)
{
    typename iter_difference_t<_I>;
    requires __is_signed_integer_like<iter_difference_t<_I>>;
    {
        ++__i
        } -> same_as<_I &>;
    __i++;
};

template<typename _I>
concept incrementable = regular<_I> && weakly_incrementable<_I> && requires(_I __i)
{
    {
        __i++
        } -> same_as<_I>;
};

template<typename _I>
concept input_or_output_iterator = weakly_incrementable<_I> && requires(_I __i)
{
    {
        *__i
        } -> __can_reference;
};

template<typename _S, typename _I>
concept sentinel_for =
    semiregular<_S> && input_or_output_iterator<_I> && __weakly_equality_comparable_with<_S, _I>;

template<class S, class I>
inline constexpr bool disable_sized_sentinel_for = false;

template<typename _S, typename _I>
concept sized_sentinel_for = sentinel_for<_S, _I> && !disable_sized_sentinel_for<
                                 remove_cv_t<_S>,
                                 remove_cv_t<_I>> && requires(const _I & __i, const _S & __s)
{
    {
        __s - __i
        } -> same_as<iter_difference_t<_I>>;
    {
        __i - __s
        } -> same_as<iter_difference_t<_I>>;
};

template<typename _I>
struct __iter_traits_impl
{
    using type = iterator_traits<_I>;
};

template<typename _I>
requires __primary_template<iterator_traits<_I>>
struct __iter_traits_impl<_I>
{
    using type = _I;
};

template<typename _I>
using __iter_traits = typename __iter_traits_impl<_I>::type;

template<typename _I>
struct __iter_concept_impl
{
};

template<typename _I>
concept __iter_concept_1_1 = requires
{
    typename __iter_traits<_I>::iterator_concept;
};

template<typename _I>
requires __iter_concept_1_1<_I>
struct __iter_concept_impl<_I>
{
    using type = typename __iter_traits<_I>::iterator_concept;
};

template<typename _I>
concept __iter_concept_1_2 = !__iter_concept_1_1<_I> && requires
{
    typename __iter_traits<_I>::iterator_category;
};

template<typename _I>
requires __iter_concept_1_2<_I>
struct __iter_concept_impl<_I>
{
    using type = typename __iter_traits<_I>::iterator_category;
};

template<typename _I>
concept __iter_concept_1_3 = !__iter_concept_1_2<_I> && __primary_template<iterator_traits<_I>>;

template<typename _I>
requires __iter_concept_1_3<_I>
struct __iter_concept_impl<_I>
{
    using type = random_access_iterator_tag;
};

template<typename _I>
using __iter_concept = typename __iter_concept_impl<_I>::type;

template<typename _I>
concept input_iterator = input_or_output_iterator<_I> && indirectly_readable<_I> && requires
{
    typename __iter_concept<_I>;
} && derived_from<__iter_concept<_I>, input_iterator_tag>;

template<typename _I, typename _T>
concept output_iterator =
    input_or_output_iterator<_I> && indirectly_writable<_I, _T> && requires(_I __i, _T && __t)
{
    *__i++ = __ROSESTD::forward<_T>(__t);
};

template<typename _I>
concept forward_iterator =
    input_iterator<_I> && derived_from<__iter_concept<_I>, forward_iterator_tag> && incrementable<
        _I> && sentinel_for<_I, _I>;

template<typename _I>
concept bidirectional_iterator =
    forward_iterator<_I> && derived_from<__iter_concept<_I>, bidirectional_iterator_tag> && requires(_I __i)
{
    {
        --__i
        } -> same_as<_I &>;
    {
        __i--
        } -> same_as<_I>;
};

template<typename _I>
concept random_access_iterator =
    bidirectional_iterator<_I> && derived_from<__iter_concept<_I>, random_access_iterator_tag> && totally_ordered<
        _I> && sized_sentinel_for<_I, _I> && requires(_I __i, const _I __j, const iter_difference_t<_I> __n)
{
    {
        __i += __n
        } -> same_as<_I &>;
    {
        __j + __n
        } -> same_as<_I>;
    {
        __n + __j
        } -> same_as<_I>;
    {
        __i -= __n
        } -> same_as<_I &>;
    {
        __j - __n
        } -> same_as<_I>;
    {
        __j[__n]
        } -> same_as<iter_reference_t<_I>>;
};

/*
// [iterator.concept.contiguous], concept contiguous_­iterator
template<class I>
concept contiguous_iterator = see below;

// [indirectcallable], indirect callable requirements
// [indirectcallable.indirectinvocable], indirect callables
template<class F, class I>
concept indirectly_unary_invocable = see below;

template<class F, class I>
concept indirectly_regular_unary_invocable = see below;

template<class F, class I>
concept indirect_unary_predicate = see below;

template<class F, class I1, class I2>
concept indirect_binary_predicate = see below;

template<class F, class I1, class I2 = I1>
concept indirect_equivalence_relation = see below;

template<class F, class I1, class I2 = I1>
concept indirect_strict_weak_order = see below;

template<class F, class... Is>
    requires(indirectly_­readable<Is> &&...)
    && invocable<F, iter_reference_t<Is>...> using indirect_result_t =
    invoke_result_t<F, iter_reference_t<Is>...>;

// [projected], projected
template<indirectly_­readable I, indirectly_­regular_­unary_­invocable<I> Proj>
struct projected;

template<weakly_­incrementable I, class Proj>
struct incrementable_traits<projected<I, Proj>>;

// [alg.req], common algorithm requirements
// [alg.req.ind.move], concept indirectly_­movable
template<class In, class Out>
concept indirectly_movable = see below;

template<class In, class Out>
concept indirectly_movable_storable = see below;

// [alg.req.ind.copy], concept indirectly_­copyable
template<class In, class Out>
concept indirectly_copyable = see below;

template<class In, class Out>
concept indirectly_copyable_storable = see below;

// [alg.req.ind.swap], concept indirectly_­swappable
template<class I1, class I2 = I1>
concept indirectly_swappable = see below;

// [alg.req.ind.cmp], concept indirectly_­comparable
template<class I1, class I2, class R, class P1 = identity, class P2 = identity>
concept indirectly_comparable = see below;

// [alg.req.permutable], concept permutable
template<class I>
concept permutable = see below;

// [alg.req.mergeable], concept mergeable
template<class I1, class I2, class Out, class R = ranges::less, class P1 = identity, class P2 = identity>
concept mergeable = see below;

// [alg.req.sortable], concept sortable
template<class I, class R = ranges::less, class P = identity>
concept sortable = see below;

// [iterator.operations], iterator operations
*/

template<class _InputIterator, class _Distance>
constexpr void advance(_InputIterator & __i, _Distance __n)
{
    if (__n < 0)
    {
        __n = -__n;
        if constexpr (random_access_iterator<_InputIterator>)
        {
            __i = __i - __n;
        }
        else
        {
            while (__n--)
            {
                --__i;
            }
        }
    }
    else
    {
        if constexpr (random_access_iterator<_InputIterator>)
        {
            __i = __i + __n;
        }
        else
        {
            while (__n--)
            {
                ++__i;
            }
        }
    }
}

/*
template<class InputIterator>
constexpr typename iterator_traits<InputIterator>::difference_type distance(
    InputIterator first,
    InputIterator last);
*/

template<typename _InputIterator>
constexpr _InputIterator next(
    _InputIterator __x,
    typename iterator_traits<_InputIterator>::difference_type __n = 1)
{
    __ROSESTD::advance(__x, __n);
    return __x;
}

/*
template<class BidirectionalIterator>
constexpr BidirectionalIterator prev(
    BidirectionalIterator x,
    typename iterator_traits<BidirectionalIterator>::difference_type n = 1);

// [range.iter.ops], range iterator operations
namespace ranges
{
    // [range.iter.op.advance], ranges​::​advance
    template<input_­or_­output_­iterator I>
    constexpr void advance(I & i, iter_difference_t<I> n);
    template<input_­or_­output_­iterator I, sentinel_­for<I> S>
    constexpr void advance(I & i, S bound);
    template<input_­or_­output_­iterator I, sentinel_­for<I> S>
    constexpr iter_difference_t<I> advance(I & i, iter_difference_t<I> n, S bound);

    // [range.iter.op.distance], ranges​::​distance
    template<input_­or_­output_­iterator I, sentinel_­for<I> S>
    constexpr iter_difference_t<I> distance(I first, S last);
    template<range R>
    constexpr range_difference_t<R> distance(R && r);

    // [range.iter.op.next], ranges​::​next
    template<input_­or_­output_­iterator I>
    constexpr I next(I x);
    template<input_­or_­output_­iterator I>
    constexpr I next(I x, iter_difference_t<I> n);
    template<input_­or_­output_­iterator I, sentinel_­for<I> S>
    constexpr I next(I x, S bound);
    template<input_­or_­output_­iterator I, sentinel_­for<I> S>
    constexpr I next(I x, iter_difference_t<I> n, S bound);

    // [range.iter.op.prev], ranges​::​prev
    template<bidirectional_­iterator I>
    constexpr I prev(I x);
    template<bidirectional_­iterator I>
    constexpr I prev(I x, iter_difference_t<I> n);
    template<bidirectional_­iterator I>
    constexpr I prev(I x, iter_difference_t<I> n, I bound);
}

// [predef.iterators], predefined iterators and sentinels
// [reverse.iterators], reverse iterators
template<class Iterator>
class reverse_iterator;

template<class Iterator1, class Iterator2>
constexpr bool operator==(const reverse_iterator<Iterator1> & x, const reverse_iterator<Iterator2> & y);
template<class Iterator1, class Iterator2>
constexpr bool operator!=(const reverse_iterator<Iterator1> & x, const reverse_iterator<Iterator2> & y);
template<class Iterator1, class Iterator2>
constexpr bool operator<(const reverse_iterator<Iterator1> & x, const reverse_iterator<Iterator2> & y);
template<class Iterator1, class Iterator2>
constexpr bool operator>(const reverse_iterator<Iterator1> & x, const reverse_iterator<Iterator2> & y);
template<class Iterator1, class Iterator2>
constexpr bool operator<=(const reverse_iterator<Iterator1> & x, const reverse_iterator<Iterator2> & y);
template<class Iterator1, class Iterator2>
constexpr bool operator>=(const reverse_iterator<Iterator1> & x, const reverse_iterator<Iterator2> & y);
template<class Iterator1, three_­way_­comparable_­with<Iterator1> Iterator2>
constexpr compare_three_way_result_t<Iterator1, Iterator2> operator<=>(
    const reverse_iterator<Iterator1> & x,
    const reverse_iterator<Iterator2> & y);

template<class Iterator1, class Iterator2>
constexpr auto operator-(const reverse_iterator<Iterator1> & x, const reverse_iterator<Iterator2> & y)
    -> decltype(y.base() - x.base());
template<class Iterator>
constexpr reverse_iterator<Iterator> operator+(
    iter_difference_t<Iterator> n,
    const reverse_iterator<Iterator> & x);

template<class Iterator>
constexpr reverse_iterator<Iterator> make_reverse_iterator(Iterator i);

template<class Iterator1, class Iterator2>
requires(!sized_­sentinel_­for<Iterator1, Iterator2>) inline constexpr bool disable_sized_sentinel_for<
    reverse_iterator<Iterator1>,
    reverse_iterator<Iterator2>> = true;

// [insert.iterators], insert iterators
template<class Container>
class back_insert_iterator;
template<class Container>
constexpr back_insert_iterator<Container> back_inserter(Container & x);

template<class Container>
class front_insert_iterator;
template<class Container>
constexpr front_insert_iterator<Container> front_inserter(Container & x);

template<class Container>
class insert_iterator;
template<class Container>
constexpr insert_iterator<Container> inserter(Container & x, ranges::iterator_t<Container> i);

// [move.iterators], move iterators and sentinels
template<class Iterator>
class move_iterator;

template<class Iterator1, class Iterator2>
constexpr bool operator==(const move_iterator<Iterator1> & x, const move_iterator<Iterator2> & y);
template<class Iterator1, class Iterator2>
constexpr bool operator<(const move_iterator<Iterator1> & x, const move_iterator<Iterator2> & y);
template<class Iterator1, class Iterator2>
constexpr bool operator>(const move_iterator<Iterator1> & x, const move_iterator<Iterator2> & y);
template<class Iterator1, class Iterator2>
constexpr bool operator<=(const move_iterator<Iterator1> & x, const move_iterator<Iterator2> & y);
template<class Iterator1, class Iterator2>
constexpr bool operator>=(const move_iterator<Iterator1> & x, const move_iterator<Iterator2> & y);
template<class Iterator1, three_­way_­comparable_­with<Iterator1> Iterator2>
constexpr compare_three_way_result_t<Iterator1, Iterator2> operator<=>(
    const move_iterator<Iterator1> & x,
    const move_iterator<Iterator2> & y);

template<class Iterator1, class Iterator2>
constexpr auto operator-(const move_iterator<Iterator1> & x, const move_iterator<Iterator2> & y)
    -> decltype(x.base() - y.base());
template<class Iterator>
constexpr move_iterator<Iterator> operator+(iter_difference_t<Iterator> n, const move_iterator<Iterator> & x);

template<class Iterator>
constexpr move_iterator<Iterator> make_move_iterator(Iterator i);

template<semiregular S>
class move_sentinel;

// [iterators.common], common iterators
template<input_­or_­output_­iterator I, sentinel_­for<I> S>
requires(!same_­as<I, S> && copyable<I>) class common_iterator;

template<class I, class S>
struct incrementable_traits<common_iterator<I, S>>;

template<input_­iterator I, class S>
struct iterator_traits<common_iterator<I, S>>;

// [default.sentinel], default sentinel
struct default_sentinel_t;
inline constexpr default_sentinel_t default_sentinel{};

// [iterators.counted], counted iterators
template<input_­or_­output_­iterator I>
class counted_iterator;

template<class I>
struct incrementable_traits<counted_iterator<I>>;

template<input_­iterator I>
struct iterator_traits<counted_iterator<I>>;

// [unreachable.sentinel], unreachable sentinel
struct unreachable_sentinel_t;
inline constexpr unreachable_sentinel_t unreachable_sentinel{};

// [stream.iterators], stream iterators
template<class T, class charT = char, class traits = char_traits<charT>, class Distance = ptrdiff_t>
class istream_iterator;
template<class T, class charT, class traits, class Distance>
bool operator==(
    const istream_iterator<T, charT, traits, Distance> & x,
    const istream_iterator<T, charT, traits, Distance> & y);

template<class T, class charT = char, class traits = char_traits<charT>>
class ostream_iterator;

template<class charT, class traits = char_traits<charT>>
class istreambuf_iterator;
template<class charT, class traits>
bool operator==(const istreambuf_iterator<charT, traits> & a, const istreambuf_iterator<charT, traits> & b);

template<class charT, class traits = char_traits<charT>>
class ostreambuf_iterator;
*/

template<typename _C>
constexpr auto begin(_C & __c) -> decltype(__c.begin())
{
    return __c.begin();
}

template<typename _C>
constexpr auto begin(const _C & __c) -> decltype(__c.begin())
{
    return __c.begin();
}

template<typename _C>
constexpr auto end(_C & __c) -> decltype(__c.end())
{
    return __c.end();
}

template<typename _C>
constexpr auto end(const _C & __c) -> decltype(__c.end())
{
    return __c.end();
}

template<typename _T, size_t _N>
constexpr _T * begin(_T (&__array)[_N]) noexcept
{
    return __array;
}

template<typename _T, size_t _N>
constexpr _T * end(_T (&__array)[_N]) noexcept
{
    return __array + _N;
}

template<typename _C>
constexpr auto cbegin(const _C & __c) noexcept(noexcept(__ROSESTD::begin(__c)))
    -> decltype(__ROSESTD::begin(__c))
{
    return __ROSESTD::begin(__c);
}

template<typename _C>
constexpr auto cend(const _C & __c) noexcept(noexcept(__ROSESTD::end(__c))) -> decltype(__ROSESTD::end(__c))
{
    return __ROSESTD::end(__c);
}

/*
template<class C>
constexpr auto rbegin(C & c) -> decltype(c.rbegin());
template<class C>
constexpr auto rbegin(const C & c) -> decltype(c.rbegin());
template<class C>
constexpr auto rend(C & c) -> decltype(c.rend());
template<class C>
constexpr auto rend(const C & c) -> decltype(c.rend());
template<class T, size_t N>
constexpr reverse_iterator<T *> rbegin(T (&array)[N]);
template<class T, size_t N>
constexpr reverse_iterator<T *> rend(T (&array)[N]);
template<class E>
constexpr reverse_iterator<const E *> rbegin(initializer_list<E> il);
template<class E>
constexpr reverse_iterator<const E *> rend(initializer_list<E> il);
template<class C>
constexpr auto crbegin(const C & c) -> decltype(__ROSESTD::rbegin(c));
template<class C>
constexpr auto crend(const C & c) -> decltype(__ROSESTD::rend(c));

template<class C>
constexpr auto size(const C & c) -> decltype(c.size());
template<class T, size_t N>
constexpr size_t size(const T (&array)[N]) noexcept;
template<class C>
constexpr auto ssize(const C & c) -> common_type_t<ptrdiff_t, make_signed_t<decltype(c.size())>>;
template<class T, ptrdiff_t N>
constexpr ptrdiff_t ssize(const T (&array)[N]) noexcept;
template<class C>
[[nodiscard]] constexpr auto empty(const C & c) -> decltype(c.empty());
template<class T, size_t N>
[[nodiscard]] constexpr bool empty(const T (&array)[N]) noexcept;
template<class E>
[[nodiscard]] constexpr bool empty(initializer_list<E> il) noexcept;
template<class C>
constexpr auto data(C & c) -> decltype(c.data());
template<class C>
constexpr auto data(const C & c) -> decltype(c.data());
template<class T, size_t N>
constexpr T * data(T (&array)[N]) noexcept;
template<class E>
constexpr const E * data(initializer_list<E> il) noexcept;
*/

__ROSESTD_CLOSE

// vim: ft=cpp
