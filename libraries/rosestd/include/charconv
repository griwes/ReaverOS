/*
 * Copyright © 2021 Michał 'Griwes' Dominiak
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include "__config"
#include "concepts"
#include "cstdint"
#include "cstring"
#include "system_error"
#include "version"

__ROSESTD_OPEN

enum class chars_format
{
    scientific = 0x1,
    fixed = 0x2,
    hex = 0x4,
    general = fixed | scientific
};

struct to_chars_result
{
    char * ptr;
    errc ec;
    friend bool operator==(const to_chars_result &, const to_chars_result &) = default;
};

inline constexpr char __digits[] = { "0123456789abcdefghijklmnopqrstuvwxyz" };
static_assert(sizeof(__digits) == 37);

to_chars_result to_chars(char * __first, char * __last, integral auto __value, int __base = 10)
{
    if (__first == __last)
    {
        return { __first, errc::value_too_large };
    }

    if (__value == 0)
    {
        *__first++ = '0';
        return { __first, errc{} };
    }

    if (__value < 0)
    {
        *__first++ = '-';
        __value = -__value;
    }

    char __buffer[128]{};
    auto __it = __buffer + 127;

    while (__value)
    {
        *__it-- = __digits[__value % __base];
        __value /= __base;
    }
    ++__it;

    auto __count = __buffer + 128 - __it;
    auto __buffer_size = __last - __first;

    if (__count > __buffer_size)
    {
        return { __last, errc::value_too_large };
    }

    memcpy(__first, __it, __count);

    return { __first + __count, errc{} };
}

to_chars_result to_chars(char * __first, char * __last, bool __value, int __base = 10) = delete;

to_chars_result to_chars(char * __first, char * __last, float __value);
to_chars_result to_chars(char * __first, char * __last, double __value);
to_chars_result to_chars(char * __first, char * __last, long double __value);

to_chars_result to_chars(char * __first, char * __last, float __value, chars_format __fmt);
to_chars_result to_chars(char * __first, char * __last, double __value, chars_format __fmt);
to_chars_result to_chars(char * __first, char * __last, long double __value, chars_format __fmt);

to_chars_result to_chars(char * __first, char * __last, float __value, chars_format __fmt, int __precision);
to_chars_result to_chars(char * __first, char * __last, double __value, chars_format __fmt, int __precision);
to_chars_result to_chars(
    char * __first,
    char * __last,
    long double __value,
    chars_format __fmt,
    int __precision);

struct from_chars_result
{
    const char * ptr;
    errc ec;
    friend bool operator==(const from_chars_result &, const from_chars_result &) = default;
};

from_chars_result from_chars(
    const char * __first,
    const char * __last,
    integral auto & __value,
    int __base = 10);

from_chars_result from_chars(
    const char * __first,
    const char * __last,
    float & __value,
    chars_format __fmt = chars_format::general);
from_chars_result from_chars(
    const char * __first,
    const char * __last,
    double & __value,
    chars_format __fmt = chars_format::general);
from_chars_result from_chars(
    const char * __first,
    const char * __last,
    long double & __value,
    chars_format __fmt = chars_format::general);

__ROSESTD_CLOSE

// vim: ft=cpp
