/*
 * Copyright © 2022 Michał 'Griwes' Dominiak
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "__config"
#include "compare"
#include "utility"
#include "version"

__ROSESTD_OPEN

template<typename...>
class variant;

template<size_t _I, typename _T>
struct variant_alternative; // not defined

template<size_t _I, typename _T>
struct variant_alternative<_I, const _T> : variant_alternative<_I, _T>
{
};

template<size_t _I, typename _T>
using variant_alternative_t = typename variant_alternative<_I, _T>::type;

template<typename _First, typename... _Types>
struct variant_alternative<0, variant<_First, _Types...>>
{
    using type = _First;
};

template<size_t _I, typename _First, typename... _Types>
struct variant_alternative<_I, variant<_First, _Types...>> : variant_alternative<_I - 1, variant<_Types...>>
{
    static_assert(_I < sizeof...(_Types) + 1);
};

inline constexpr size_t variant_npos = -1;

template<typename... _Fs>
struct __overload : _Fs...
{
    __overload(_Fs... __fs) : _Fs(__ROSESTD::move(__fs))...
    {
    }
    using _Fs::operator()...;
};

template<typename _T>
using __array = _T[];

template<size_t _I, typename... _Types>
constexpr variant_alternative_t<_I, variant<_Types...>> & get(variant<_Types...> & __v);
template<size_t _I, typename... _Types>
constexpr variant_alternative_t<_I, variant<_Types...>> && get(variant<_Types...> &&);
template<size_t _I, typename... _Types>
constexpr const variant_alternative_t<_I, variant<_Types...>> & get(const variant<_Types...> &);
template<size_t _I, typename... _Types>
constexpr const variant_alternative_t<_I, variant<_Types...>> && get(const variant<_Types...> &&);

template<typename... _Types>
class variant
{
    template<typename _T, size_t... _Indices>
    static constexpr auto __get_index_for(index_sequence<_Indices...>)
    {
        return __overload(
            [&]() requires requires { __array<_Types>{ __ROSESTD::declval<_T>() }; }
            { return integral_constant<size_t, _Indices>(); }...)();
    }

    template<typename _T>
    using __index_type_for = decltype(__get_index_for<_T>(make_index_sequence<sizeof...(_Types)>()));

    template<typename _T>
    using __type_for = variant_alternative_t<decltype(__index_type_for<_T>())::value, variant>;

    template<typename>
    struct __enable_move_constructor : false_type
    {
    };

    template<typename _T>
    requires(
        sizeof...(_Types) != 0
        && !is_same_v<
            remove_cvref_t<_T>,
            variant> && !__is_variant_in_place<_T> && is_constructible_v<__type_for<_T>, _T>) struct
        __enable_move_constructor<_T> : is_constructible<__type_for<_T>, _T>
    {
    };

public:
    template<size_t _I, typename... _UTypes>
    friend constexpr variant_alternative_t<_I, variant<_UTypes...>> & get(variant<_UTypes...> & __v);
    template<size_t _I, typename... _UTypes>
    friend constexpr variant_alternative_t<_I, variant<_UTypes...>> && get(variant<_UTypes...> &&);
    template<size_t _I, typename... _UTypes>
    friend constexpr const variant_alternative_t<_I, variant<_UTypes...>> & get(const variant<_UTypes...> &);
    template<size_t _I, typename... _UTypes>
    friend constexpr const variant_alternative_t<_I, variant<_UTypes...>> && get(
        const variant<_UTypes...> &&);

    // [variant.ctor], constructors
    // constexpr variant() noexcept(see below);
    constexpr variant(const variant &);

    /*
    constexpr variant(variant &&) requires (is_trivially_move_constructible_v<_Types> &&...)) = default;
    */

    constexpr variant(variant && __other) noexcept((is_nothrow_move_constructible_v<_Types> && ...))
    {
        [&]<size_t... _Indices>(index_sequence<_Indices...>)
        {
            using __f_t = void (*)(variant &, variant &);
            static const __f_t __table[] = { +[](variant & __self, variant & __other) {
                __self.__construct<_Indices>(get<_Indices>(__ROSESTD::move(__other)));
            }... };
            __table[__other.__index](*this, __other);
        }
        (make_index_sequence<sizeof...(_Types)>());
    }

    template<typename _T>
    constexpr variant(_T && __t) noexcept(is_nothrow_constructible_v<__type_for<_T>, _T>) requires
        __enable_move_constructor<_T>::value
    {
        __construct<__index_type_for<_T>::value>(std::forward<_T>(__t));
    }

    template<typename _T, typename... _Args>
    constexpr explicit variant(in_place_type_t<_T>, _Args &&...);
    // template<typename _T, typename _U, typename... _Args>
    // constexpr explicit variant(in_place_type_t<_T>, initializer_list<_U>, _Args &&...);

    template<size_t _I, typename... _Args>
    constexpr explicit variant(in_place_index_t<_I>, _Args &&...);
    // template<size_t _I, typename _U, typename... _Args>
    // constexpr explicit variant(in_place_index_t<_I>, initializer_list<_U>, _Args &&...);

    // [variant.dtor], destructor
    constexpr ~variant()
    {
        __destroy();
    }

    // [variant.assign], assignment
    constexpr variant & operator=(const variant &);
    constexpr variant & operator=(variant &&) noexcept(
        (is_nothrow_move_constructible_v<_Types> && ...) && (is_nothrow_move_assignable_v<_Types> && ...));

    // template<typename _T>
    // constexpr variant & operator=(_T &&) noexcept(see below);

    // [variant.mod], modifiers
    template<typename _T, typename... _Args>
    constexpr _T & emplace(_Args &&...);
    // template<typename _T, typename _U, typename... _Args>
    // constexpr _T & emplace(initializer_list<_U>, _Args &&...);
    template<size_t _I, typename... _Args>
    constexpr variant_alternative_t<_I, variant<_Types...>> & emplace(_Args &&...);
    // template<size_t _I, typename _U, typename... _Args>
    // constexpr variant_alternative_t<_I, variant<_Types...>> & emplace(initializer_list<_U>, _Args &&...);

    constexpr bool valueless_by_exception() const noexcept
    {
        return __index == variant_npos;
    }

    constexpr size_t index() const noexcept
    {
        return __index;
    }

    // [variant.swap], swap
    constexpr void swap(variant &) noexcept(
        (is_nothrow_move_constructible_v<_Types> && ...) && (is_nothrow_swappable_v<_Types> && ...));

private:
    template<size_t _I, typename... _Vals>
    void __construct(_Vals &&... __vals)
    {
        new (__storage) variant_alternative_t<_I, variant>(__ROSESTD::forward<_Vals>(__vals)...);
        __index = _I;
    }

    void __destroy()
    {
        if (valueless_by_exception())
        {
            return;
        }

        using __f_t = void (*)(variant &);
        static const __f_t __table[] = { +[](variant & self)
                                         { reinterpret_cast<_Types *>(self.__storage)->~_Types(); }... };

        __table[__index](*this);
    }

    template<typename _Head, typename... _Values>
    requires(same_as<_Head, size_t> &&... && same_as<_Values, size_t>) static constexpr size_t
        __max(_Head __head, _Values... __values)
    {
        if constexpr (sizeof...(_Values) == 0)
        {
            return __head;
        }
        else
        {
            auto __submax = __max(__values...);
            return __head > __submax ? __head : __submax;
        }
    }

    size_t __index = 0;
    alignas(__max(alignof(_Types)...)) char __storage[__max(sizeof(_Types)...)];
};

template<typename _T>
struct variant_size; // not defined

template<typename _T>
struct variant_size<const _T> : variant_size<_T>
{
};

template<typename _T>
inline constexpr size_t variant_size_v = variant_size<_T>::value;

template<typename... _Types>
struct variant_size<variant<_Types...>> : integral_constant<size_t, sizeof...(_Types)>
{
};

// [variant.get], value access
template<typename _T, typename... _Types>
constexpr bool holds_alternative(const variant<_Types...> &) noexcept;

template<size_t _I, typename... _Types>
constexpr variant_alternative_t<_I, variant<_Types...>> & get(variant<_Types...> & __v)
{
    return *reinterpret_cast<variant_alternative_t<_I, variant<_Types...>> *>(__v.__storage);
}

template<size_t _I, typename... _Types>
constexpr variant_alternative_t<_I, variant<_Types...>> && get(variant<_Types...> && __v)
{
    return __ROSESTD::move(*reinterpret_cast<variant_alternative_t<_I, variant<_Types...>> *>(__v.__storage));
}

template<size_t _I, typename... _Types>
constexpr const variant_alternative_t<_I, variant<_Types...>> & get(const variant<_Types...> & __v)
{
    return *reinterpret_cast<const variant_alternative_t<_I, variant<_Types...>> *>(__v.__storage);
}

template<size_t _I, typename... _Types>
constexpr const variant_alternative_t<_I, variant<_Types...>> && get(const variant<_Types...> && __v)
{
    return __ROSESTD::move(
        *reinterpret_cast<const variant_alternative_t<_I, variant<_Types...>> *>(__v.__storage));
}

template<typename _T, typename... _Types>
constexpr _T & get(variant<_Types...> &);
template<typename _T, typename... _Types>
constexpr _T && get(variant<_Types...> &&);
template<typename _T, typename... _Types>
constexpr const _T & get(const variant<_Types...> &);
template<typename _T, typename... _Types>
constexpr const _T && get(const variant<_Types...> &&);

template<size_t _I, typename... _Types>
constexpr add_pointer_t<variant_alternative_t<_I, variant<_Types...>>> get_if(variant<_Types...> *) noexcept;
template<size_t _I, typename... _Types>
constexpr add_pointer_t<const variant_alternative_t<_I, variant<_Types...>>> get_if(
    const variant<_Types...> *) noexcept;

template<typename _T, typename... _Types>
constexpr add_pointer_t<_T> get_if(variant<_Types...> *) noexcept;
template<typename _T, typename... _Types>
constexpr add_pointer_t<const _T> get_if(const variant<_Types...> *) noexcept;

// [variant.relops], relational operators
template<typename... _Types>
constexpr bool operator==(const variant<_Types...> &, const variant<_Types...> &);
template<typename... _Types>
constexpr bool operator!=(const variant<_Types...> &, const variant<_Types...> &);
template<typename... _Types>
constexpr bool operator<(const variant<_Types...> &, const variant<_Types...> &);
template<typename... _Types>
constexpr bool operator>(const variant<_Types...> &, const variant<_Types...> &);
template<typename... _Types>
constexpr bool operator<=(const variant<_Types...> &, const variant<_Types...> &);
template<typename... _Types>
constexpr bool operator>=(const variant<_Types...> &, const variant<_Types...> &);
template<typename... _Types>
requires(three_way_comparable<_Types> &&...) constexpr common_comparison_category_t<
    compare_three_way_result_t<_Types>...>
operator<=>(const variant<_Types...> &, const variant<_Types...> &);

// [variant.visit], visitation
// template<typename _Visitor, typename... _Variants>
// constexpr see below visit(_Visitor &&, _Variants &&...);
template<typename _R, typename _Visitor, typename... _Variants>
constexpr _R visit(_Visitor &&, _Variants &&...);

// [variant.monostate], class monostate
struct monostate;

// [variant.monostate.relops], monostate relational operators
constexpr bool operator==(monostate, monostate) noexcept;
constexpr strong_ordering operator<=>(monostate, monostate) noexcept;

// [variant.specalg], specialized algorithms
// template<typename... _Types>
// constexpr void swap(variant<_Types...> &, variant<_Types...> &) noexcept(see below);

// [variant.bad.access], class bad_­variant_­access
class bad_variant_access;

// [variant.hash], hash support
template<typename _T>
struct hash;
template<typename... _Types>
struct hash<variant<_Types...>>;
template<>
struct hash<monostate>;

__ROSESTD_CLOSE

// vim: ft=cpp
