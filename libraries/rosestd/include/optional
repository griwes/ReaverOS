/*
 * Copyright © 2021-2022 Michał 'Griwes' Dominiak
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include "__config"
#include "compare"
#include "memory"
#include "new"
#include "utility"

__ROSESTD_OPEN

struct __nullopt_tag_t
{
    constexpr explicit __nullopt_tag_t() = default;
};

struct nullopt_t
{
    constexpr nullopt_t(__nullopt_tag_t)
    {
    }
};

inline constexpr nullopt_t nullopt(__nullopt_tag_t{});

template<typename _T>
class optional
{
public:
    using value_type = _T;

    constexpr optional() noexcept = default;

    constexpr optional(nullopt_t) noexcept {};

    constexpr optional(const optional &);
    constexpr optional(optional &&) noexcept(is_nothrow_move_constructible_v<_T>);
    // template<class... Args>
    // constexpr explicit optional(in_place_t, Args &&...);
    // template<typename _U, class... Args>
    // constexpr explicit optional(in_place_t, initializer_list<U>, Args &&...);

    template<typename _U = _T>
    constexpr explicit(!is_convertible_v<_U, _T>) optional(_U && __u) requires(
        is_constructible_v<
            _T,
            _U> && !is_same_v<remove_cvref_t<_U>, in_place_t> && !is_same_v<remove_cvref_t<_U>, optional>)
    {
        new (static_cast<void *>(addressof(__storage.__value))) _T(static_cast<_U &&>(__u));
        __engaged = true;
    }

    template<typename _U>
    constexpr explicit(!is_convertible_v<const _U &, _T>) optional(const optional<_U> &);
    template<typename _U>
    constexpr explicit(!is_convertible_v<_U, _T>) optional(optional<_U> &&);

    /* TODO: uncomment when Clang people finally implement P0848R3
    constexpr ~optional() requires is_trivially_destructible_v<_T>
    = default;
    */

    constexpr ~optional()
    {
        if (__engaged)
        {
            __storage.__value._T::~_T();
        }
    }

    constexpr optional & operator=(nullopt_t) noexcept;
    constexpr optional & operator=(const optional &);
    constexpr optional & operator=(optional &&) noexcept(
        is_nothrow_move_assignable_v<_T> && is_nothrow_move_constructible_v<_T>);

    template<typename _U = _T>
    requires(
        !is_same_v<
            remove_cvref_t<_U>,
            optional> && !conjunction_v<is_scalar<_T>, is_same<_T, decay_t<_U>>> && is_constructible_v<_T, _U> && is_assignable_v<_T &, _U>) constexpr optional &
    operator=(_U && __u)
    {
        if (__engaged)
        {
            __storage.__value = static_cast<_U &&>(__u);
        }
        else
        {
            new (static_cast<void *>(addressof(__storage.__value))) _T(static_cast<_U &&>(__u));
            __engaged = true;
        }

        return *this;
    }

    template<typename _U>
    constexpr optional & operator=(const optional<_U> &);
    template<typename _U>
    constexpr optional & operator=(optional<_U> &&);
    template<class... _Args>
    constexpr _T & emplace(_Args &&...);
    // template<typename _U, class... _Args>
    // constexpr _T & emplace(initializer_list<_U>, _Args &&...);

    constexpr void swap(optional &) noexcept(
        is_nothrow_move_constructible_v<_T> && is_nothrow_swappable_v<_T>);

    constexpr const _T * operator->() const
    {
        return &__storage.__value;
    }

    constexpr _T * operator->()
    {
        return &__storage.__value;
    }

    constexpr const _T & operator*() const &
    {
        return __storage.__value;
    }

    constexpr _T & operator*() &
    {
        return __storage.__value;
    }

    constexpr _T && operator*() &&
    {
        return __storage.__value;
    }

    constexpr const _T && operator*() const &&
    {
        return __storage.__value;
    }

    constexpr explicit operator bool() const noexcept
    {
        return __engaged;
    }

    constexpr bool has_value() const noexcept;
    constexpr const _T & value() const &;
    constexpr _T & value() &;
    constexpr _T && value() &&;
    constexpr const _T && value() const &&;
    template<typename _U>
    constexpr _T value_or(_U &&) const &;
    template<typename _U>
    constexpr _T value_or(_U &&) &&;

    // [optional.mod], modifiers
    constexpr void reset() noexcept;

private:
    union __storage_t
    {
        constexpr __storage_t()
        {
        }
        constexpr ~__storage_t()
        {
        }

        _T __value;
    };

    bool __engaged = false;
    __storage_t __storage;
};

template<class T>
optional(T) -> optional<T>;

class bad_optional_access;

template<typename _T, typename _U>
constexpr bool operator==(const optional<_T> &, const optional<_U> &);
template<typename _T, typename _U>
constexpr bool operator!=(const optional<_T> &, const optional<_U> &);
template<typename _T, typename _U>
constexpr bool operator<(const optional<_T> &, const optional<_U> &);
template<typename _T, typename _U>
constexpr bool operator>(const optional<_T> &, const optional<_U> &);
template<typename _T, typename _U>
constexpr bool operator<=(const optional<_T> &, const optional<_U> &);
template<typename _T, typename _U>
constexpr bool operator>=(const optional<_T> &, const optional<_U> &);
template<typename _T, three_way_comparable_with<_T> _U>
constexpr compare_three_way_result_t<_T, _U> operator<=>(const optional<_T> &, const optional<_U> &);

template<typename _T>
constexpr bool operator==(const optional<_T> &, nullopt_t) noexcept;
template<typename _T>
constexpr strong_ordering operator<=>(const optional<_T> &, nullopt_t) noexcept;

// [optional.comp.with.t], comparison with T
template<typename _T, typename _U>
constexpr bool operator==(const optional<_T> &, const _U &);
template<typename _T, typename _U>
constexpr bool operator==(const _T &, const optional<_U> &);
template<typename _T, typename _U>
constexpr bool operator!=(const optional<_T> &, const _U &);
template<typename _T, typename _U>
constexpr bool operator!=(const _T &, const optional<_U> &);
template<typename _T, typename _U>
constexpr bool operator<(const optional<_T> &, const _U &);
template<typename _T, typename _U>
constexpr bool operator<(const _T &, const optional<_U> &);
template<typename _T, typename _U>
constexpr bool operator>(const optional<_T> &, const _U &);
template<typename _T, typename _U>
constexpr bool operator>(const _T &, const optional<_U> &);
template<typename _T, typename _U>
constexpr bool operator<=(const optional<_T> &, const _U &);
template<typename _T, typename _U>
constexpr bool operator<=(const _T &, const optional<_U> &);
template<typename _T, typename _U>
constexpr bool operator>=(const optional<_T> &, const _U &);
template<typename _T, typename _U>
constexpr bool operator>=(const _T &, const optional<_U> &);
template<typename _T, three_way_comparable_with<_T> _U>
constexpr compare_three_way_result_t<_T, _U> operator<=>(const optional<_T> &, const _U &);

template<typename _T>
constexpr void swap(optional<_T> & __x, optional<_T> & __y) noexcept(noexcept(__x.swap(__y)));

template<typename _T>
constexpr optional<decay_t<_T>> make_optional(_T &&);
template<typename _T, class... _Args>
constexpr optional<_T> make_optional(_Args &&... __args);
// template<typename _T, typename _U, class... _Args>
// constexpr optional<_T> make_optional(initializer_list<_U> __il, _Args &&... __args);

template<typename _T>
struct hash;
template<typename _T>
struct hash<optional<_T>>;

__ROSESTD_CLOSE

// vim: ft=cpp
