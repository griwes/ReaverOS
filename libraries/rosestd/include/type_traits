/*
 * Copyright © 2021-2022 Michał 'Griwes' Dominiak
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

#include "__config"
#include "cstddef"
#include "version"

__ROSESTD_OPEN

template<typename _T>
void __implicitly_convert(_T);

template<typename _T, typename _U>
concept __implicitly_convertible = requires(_T __t)
{
    { __implicitly_convert<_U>(__t) };
};

template<typename _T>
struct remove_reference
{
    using type = _T;
};

template<typename _T>
struct remove_reference<_T &>
{
    using type = _T;
};

template<typename _T>
struct remove_reference<_T &&>
{
    using type = _T;
};

template<typename _T>
using remove_reference_t = typename remove_reference<_T>::type;

template<typename _T>
struct remove_const
{
    using type = _T;
};

template<typename _T>
struct remove_const<const _T>
{
    using type = _T;
};

template<typename _T>
struct remove_volatile
{
    using type = _T;
};

template<typename _T>
struct remove_volatile<volatile _T>
{
    using type = _T;
};

template<typename _T>
using remove_const_t = typename remove_const<_T>::type;
template<typename _T>
using remove_volatile_t = typename remove_volatile<_T>::type;

template<typename _T>
struct remove_cv
{
    using type = remove_const_t<remove_volatile_t<_T>>;
};

template<typename _T>
using remove_cv_t = typename remove_cv<_T>::type;

template<typename _T>
struct remove_cvref
{
    using type = remove_cv_t<remove_reference_t<_T>>;
};

template<typename _T>
concept __referenceable = __is_object(_T)
    || (__is_function(_T) && __is_same(_T, typename remove_cvref<_T>::type)) || __is_reference(_T);

template<typename _T, _T _V>
struct integral_constant
{
    static inline constexpr _T value = _V;
};

template<bool _B>
using bool_constant = integral_constant<bool, _B>;
using true_type = bool_constant<true>;
using false_type = bool_constant<false>;

template<typename _T>
struct is_void;
template<typename _T>
struct is_null_pointer;

#if !(__is_identifier(__is_integral))
template<typename _T>
struct is_integral : bool_constant<__is_integral(_T)>
{
};
#else
#error crappy compiler, yo
#endif

template<typename _T>
struct is_floating_point : bool_constant<__is_floating_point(_T)>
{
};

template<typename _T>
struct is_array : bool_constant<__is_array(_T)>
{
};

template<typename _T>
struct is_pointer : bool_constant<__is_pointer(_T)>
{
};

template<typename _T>
struct is_lvalue_reference : bool_constant<__is_lvalue_reference(_T)>
{
};

template<typename _T>
struct is_rvalue_reference : bool_constant<__is_rvalue_reference(_T)>
{
};

template<typename _T>
struct is_member_object_pointer;
template<typename _T>
struct is_member_function_pointer;
template<typename _T>
struct is_enum;
template<typename _T>
struct is_union;
template<typename _T>
struct is_class;
template<typename _T>
struct is_function;

template<typename _T>
struct is_reference : bool_constant<__is_reference(_T)>
{
};

template<typename _T>
struct is_arithmetic;
template<typename _T>
struct is_fundamental;

template<typename _T>
struct is_object : bool_constant<__is_object(_T)>
{
};

template<typename _T>
struct is_scalar : bool_constant<__is_scalar(_T)>
{
};

template<typename _T>
struct is_compound;
template<typename _T>
struct is_member_pointer;

template<typename _T>
struct is_const;
template<typename _T>
struct is_volatile;
template<typename _T>
struct is_trivial;

template<typename _T>
struct is_trivially_copyable : bool_constant<__is_trivially_copyable(_T)>
{
};

template<typename _T>
struct is_standard_layout;
template<typename _T>
struct is_empty;
template<typename _T>
struct is_polymorphic;
template<typename _T>
struct is_abstract;
template<typename _T>
struct is_final;
template<typename _T>
struct is_aggregate;

template<typename _T>
struct is_signed : bool_constant<__is_signed(_T)>
{
};

template<typename _T>
struct is_unsigned : bool_constant<__is_unsigned(_T)>
{
};

template<typename>
struct is_bounded_array : false_type
{
};
template<typename _T, size_t _N>
struct is_bounded_array<_T[_N]> : true_type
{
};

template<typename>
struct is_unbounded_array : false_type
{
};
template<typename _T>
struct is_unbounded_array<_T[]> : true_type
{
};

template<typename _T>
struct is_scoped_enum;

template<typename _T, typename _U>
struct is_same : false_type
{
};

template<typename _T>
struct is_same<_T, _T> : true_type
{
};

template<typename _T>
struct add_lvalue_reference
{
    using type = _T;
};

template<typename _T>
requires(
    is_object<_T>::value || (is_function<_T>::value && is_same<_T, typename remove_cvref<_T>::type>::value)
    || is_reference<_T>::value) struct add_lvalue_reference<_T>
{
    using type = _T &;
};

template<typename _T>
struct add_rvalue_reference
{
    using type = _T;
};

template<typename _T>
requires(
    is_object<_T>::value || (is_function<_T>::value && is_same<_T, typename remove_cvref<_T>::type>::value)
    || is_reference<_T>::value) struct add_rvalue_reference<_T>
{
    using type = _T &&;
};

template<typename _T>
using add_lvalue_reference_t = typename add_lvalue_reference<_T>::type;
template<typename _T>
using add_rvalue_reference_t = typename add_rvalue_reference<_T>::type;

template<typename _T>
add_rvalue_reference_t<_T> declval() noexcept;

template<typename _T, typename... _Args>
struct is_constructible : bool_constant<__is_constructible(_T, _Args...)>
{
};

template<typename _T>
struct is_default_constructible;

template<typename _T>
struct is_copy_constructible : bool_constant<__is_constructible(_T, const _T &)>
{
};

template<typename _T>
struct is_move_constructible : bool_constant<__is_constructible(_T, _T &&)>
{
};

template<typename _T, typename _U>
struct is_assignable : bool_constant<__is_assignable(_T, _U)>
{
};

template<typename _T>
struct is_copy_assignable : bool_constant<__is_assignable(_T &, const _T &)>
{
};

template<typename _T>
struct is_move_assignable : bool_constant<__is_assignable(_T &, _T &&)>
{
};

template<typename _T, typename _U>
struct is_swappable_with;
template<typename _T>
struct is_swappable;

template<typename _T>
struct is_destructible;

template<typename _T, typename... _Args>
struct is_trivially_constructible;
template<typename _T>
struct is_trivially_default_constructible;
template<typename _T>
struct is_trivially_copy_constructible;
template<typename _T>
struct is_trivially_move_constructible;

template<typename _T, typename _U>
struct is_trivially_assignable;
template<typename _T>
struct is_trivially_copy_assignable;
template<typename _T>
struct is_trivially_move_assignable;

template<typename _T>
struct is_trivially_destructible : bool_constant<__is_trivially_destructible(_T)>
{
};

template<typename _T, typename... _Args>
struct is_nothrow_constructible : bool_constant<__is_nothrow_constructible(_T, _Args...)>
{
};

template<typename _T>
struct is_nothrow_default_constructible : is_nothrow_constructible<_T>
{
};

template<typename _T>
struct is_nothrow_copy_constructible;

template<typename _T>
struct is_nothrow_move_constructible : bool_constant<__is_nothrow_constructible(_T, _T &&)>
{
};

template<typename _T, typename _U>
struct is_nothrow_assignable : bool_constant<__is_nothrow_assignable(_T, _U)>
{
};

template<typename _T>
struct is_nothrow_copy_assignable;

template<typename _T>
struct is_nothrow_move_assignable : std::false_type
{
};

template<typename _T>
requires __referenceable<_T>
struct is_nothrow_move_assignable<_T> : is_nothrow_assignable<_T, _T &&>
{
};

template<typename _T, typename _U>
struct is_nothrow_swappable_with;
template<typename _T>
struct is_nothrow_swappable;

template<typename _T>
struct is_nothrow_destructible : bool_constant<noexcept(declval<_T>().~_T())>
{
};

template<typename _T>
struct has_virtual_destructor;

template<typename _T>
struct has_unique_object_representations;

template<typename _T>
struct alignment_of;
template<typename _T>
struct rank;
template<typename _T, unsigned _I = 0>
struct extent;

template<typename _Base, typename _Derived>
struct is_base_of : bool_constant<__is_base_of(_Base, _Derived)>
{
};

template<typename _From, typename _To>
struct is_convertible : bool_constant<__is_convertible(_From, _To)>
{
};

template<typename _From, typename _To>
struct is_nothrow_convertible;
template<typename _T, typename _U>
struct is_layout_compatible;
template<typename _Base, typename _Derived>
struct is_pointer_interconvertible_base_of;

template<typename _Fn, typename... _ArgTypes>
struct is_invocable;
template<typename _R, typename _Fn, typename... _ArgTypes>
struct is_invocable_r;

template<typename _Fn, typename... _ArgTypes>
struct is_nothrow_invocable;
template<typename _R, typename _Fn, typename... _ArgTypes>
struct is_nothrow_invocable_r;

template<typename _T>
struct add_const;
template<typename _T>
struct add_volatile;
template<typename _T>
struct add_cv;

template<typename _T>
using add_const_t = typename add_const<_T>::type;
template<typename _T>
using add_volatile_t = typename add_volatile<_T>::type;
template<typename _T>
using add_cv_t = typename add_cv<_T>::type;

template<typename _T>
struct make_signed;
template<typename _T>
struct make_unsigned;

template<typename _T>
using make_signed_t = typename make_signed<_T>::type;
template<typename _T>
using make_unsigned_t = typename make_unsigned<_T>::type;

template<typename _T>
struct remove_extent
{
    using type = _T;
};
template<typename _T>
struct remove_extent<_T[]>
{
    using type = _T;
};
template<typename _T, size_t _N>
struct remove_extent<_T[_N]>
{
    using type = _T;
};

template<typename _T>
struct remove_all_extents
{
    using type = _T;
};
template<typename _T>
struct remove_all_extents<_T[]>
{
    using type = typename remove_all_extents<_T>::type;
};
template<typename _T, size_t _N>
struct remove_all_extents<_T[_N]>
{
    using type = typename remove_all_extents<_T>::type;
};

template<typename _T>
using remove_extent_t = typename remove_extent<_T>::type;
template<typename _T>
using remove_all_extents_t = typename remove_all_extents<_T>::type;

template<typename _T>
struct remove_pointer;

template<typename _T>
struct type_identity
{
    using type = _T;
};

template<typename _T>
struct add_pointer
{
    using type = _T;
};

template<typename _T>
requires requires
{
    typename type_identity<_T &>::type;
}
struct add_pointer<_T>
{
    using type = typename remove_reference<_T>::type *;
};

template<typename _T>
using remove_pointer_t = typename remove_pointer<_T>::type;
template<typename _T>
using add_pointer_t = typename add_pointer<_T>::type;

template<size_t _Len, size_t _Align = 16> // see [meta.trans.other]
struct aligned_storage;
template<size_t _Len, typename... _Types>
struct aligned_union;

template<bool, typename _T, typename _F>
struct conditional
{
    using type = _T;
};

template<typename _T, typename _F>
struct conditional<false, _T, _F>
{
    using type = _F;
};

template<typename _T>
using remove_cvref_t = typename remove_cvref<_T>::type;

template<typename _T>
struct decay
{
    using _U = remove_reference_t<_T>;

    template<typename _U>
    struct __case1
    {
        using type = remove_extent_t<_U> *;
    };

    template<typename _U>
    struct __case2
    {
        using type = add_pointer_t<_U>;
    };

    template<typename _U>
    struct __case3
    {
        using type = remove_cv_t<_U>;
    };

    using type = typename conditional<
        __is_array(_U),
        __case1<_U>,
        typename conditional<__is_function(_U), __case2<_U>, __case3<_U>>::type>::type::type;
};

template<bool _B, typename _T = void>
struct enable_if
{
    using type = _T;
};

template<typename _T>
struct enable_if<false, _T>
{
};

template<typename _T>
using __cref = add_lvalue_reference_t<const remove_reference_t<_T>>;

template<typename _T>
struct __xref
{
    using __unrefd = typename remove_reference<_T>::type;

    template<typename _U>
    using __maybe_add_const = typename conditional<__is_const(__unrefd), const _U, _U>::type;

    template<typename _U>
    using __maybe_add_volatile =
        typename conditional<__is_volatile(__unrefd), volatile __maybe_add_const<_U>, __maybe_add_const<_U>>::
            type;

    template<typename _U>
    using __maybe_add_rvalue_ref = typename conditional<
        __is_rvalue_reference(_T),
        __maybe_add_volatile<_U> &&,
        __maybe_add_volatile<_U>>::type;

    template<typename _U>
    using __maybe_add_lvalue_ref = typename conditional<
        __is_lvalue_reference(_T),
        __maybe_add_volatile<_U> &,
        __maybe_add_rvalue_ref<_U>>::type;

    template<typename _U>
    using type = __maybe_add_lvalue_ref<_U>;
};

template<typename _S, typename _D>
struct __copycv_impl
{
    using __maybe_add_const = typename conditional<__is_const(_S), const _D, _D>::type;

    using __maybe_add_volatile =
        typename conditional<__is_volatile(_S), volatile __maybe_add_const, __maybe_add_const>::type;

    using type = __maybe_add_volatile;
};

template<typename _S, typename _D>
using __copycv = typename __copycv_impl<_S, _D>::type;

template<typename _T1, typename _T2>
using __cond_res = decltype(false ? declval<_T1 (&)()>()() : declval<_T2 (&)()>()());

template<typename _T1, typename _T2>
struct __common_ref_impl;

template<typename _T1, typename _T2>
requires is_lvalue_reference<_T1>::value && is_lvalue_reference<_T2>::value struct __common_ref_impl<_T1, _T2>
{
    using __x = remove_reference_t<_T1>;
    using __y = remove_reference_t<_T2>;

    template<typename _X, typename _Y>
    struct __selector
    {
    };

    template<typename _X, typename _Y>
    using __type1 = __cond_res<__copycv<_X, _Y> &, __copycv<_Y, _X> &>;
    static const constexpr auto __use_type1 =
        is_lvalue_reference<_T1>::value && is_lvalue_reference<_T2>::value && requires
    {
        typename enable_if<is_reference<__type1<__x, __y>>::value>::type;
    };

    template<typename _X, typename _Y>
    requires __use_type1 struct __selector<_X, _Y>
    {
        using type = __type1<_X, _Y>;
    };

    template<typename _X, typename _Y>
    using __type2 = remove_reference_t<typename __common_ref_impl<_X &, _Y &>::type> &&;

    static const constexpr auto __use_type2 =
        !__use_type1 && is_rvalue_reference<_T1>::value && is_rvalue_reference<_T2>::value && requires
    {
        typename __type2<__x, __y>;
        typename enable_if<is_convertible<_T1, __type2<__x, __y>>::value>::type;
        typename enable_if<is_convertible<_T2, __type2<__x, __y>>::value>::type;
    };

    template<typename _X, typename _Y>
    requires __use_type2 struct __selector<_X, _Y>
    {
        using type = __type2<_X, _Y>;
    };

    template<typename _X, typename _Y>
    using __type3 = typename __common_ref_impl<const _X &, _Y &>::type;

    static const constexpr auto __use_type3 =
        !__use_type2 && is_rvalue_reference<_T1>::value && is_lvalue_reference<_T2>::value && requires
    {
        typename __common_ref_impl<const _T1 &, _T2 &>::type;
        // typename __type3<__x, __y>;
        typename enable_if<is_convertible<_T1, __type3<__x, __y>>::value>::type;
    };

    template<typename _X, typename _Y>
    requires __use_type3 struct __selector<_X, _Y>
    {
        using type = __type3<_X, _Y>;
    };

    template<typename _X, typename _Y>
    using __type4 = __common_ref_impl<_X, _Y>;

    static const constexpr auto __use_type4 =
        !__use_type3 && is_lvalue_reference<_T1>::value && is_rvalue_reference<_T2>::value;

    template<typename _X, typename _Y>
    requires __use_type4 struct __selector<_X, _Y>
    {
        using type = __type4<_X, _Y>;
    };
};

template<typename _T1, typename _T2>
using __common_ref = typename __common_ref_impl<_T1, _T2>::
    template __selector<remove_reference_t<_T1>, remove_reference_t<_T2>>::type;

template<typename... _Ts>
struct common_type
{
};

template<>
struct common_type<>
{
};

template<typename _T>
struct common_type<_T> : common_type<_T, _T>
{
};

template<typename _T1, typename _T2>
concept __common_type_4_1 =
    !is_same<_T1, typename decay<_T1>::type>::value || !is_same<_T2, typename decay<_T2>::type>::value;

template<typename _T1, typename _T2>
requires __common_type_4_1<_T1, _T2>
struct common_type<_T1, _T2> : common_type<typename decay<_T1>::type, typename decay<_T2>::type>
{
};

template<typename _T1, typename _T2>
concept __common_type_4_3 = !__common_type_4_1<_T1, _T2> && requires
{
    typename decay<decltype(false ? declval<_T1>() : declval<_T2>())>::type;
};

template<typename _T1, typename _T2>
requires __common_type_4_3<_T1, _T2>
struct common_type<_T1, _T2>
{
    using type = typename decay<decltype(false ? declval<_T1>() : declval<_T2>())>::type;
};

template<typename _T1, typename _T2>
concept __common_type_4_4 = !__common_type_4_3<_T1, _T2> && requires
{
    typename __cond_res<__cref<_T1>, __cref<_T2>>;
};

template<typename _T1, typename _T2>
requires __common_type_4_4<_T1, _T2>
struct common_type<_T1, _T2>
{
    using type = typename decay<__cond_res<__cref<_T1>, __cref<_T2>>>::type;
};

template<typename _T1, typename _T2, typename... Rest>
requires(sizeof...(Rest) > 0 && requires {
    typename common_type<_T1, _T2>::type;
}) struct common_type<_T1, _T2, Rest...>
{
    using type = typename common_type<typename common_type<_T1, _T2>::type, Rest...>::type;
};

template<typename... _T>
using common_type_t = typename common_type<_T...>::type;

template<typename _T, typename _U, template<typename> typename _TQual, template<typename> typename _UQual>
struct basic_common_reference
{
};

template<typename... _Ts>
struct common_reference;

template<>
struct common_reference<>
{
};

template<typename _T>
struct common_reference<_T>
{
    using type = _T;
};

template<typename _T1, typename _T2>
concept __common_reference_3_1 = requires
{
    typename __common_ref<_T1, _T2>;
};

template<typename _T1, typename _T2>
requires __common_reference_3_1<_T1, _T2>
struct common_reference<_T1, _T2>
{
    using type = __common_ref<_T1, _T2>;
};

template<typename _T1, typename _T2>
concept __common_reference_3_2 = !__common_reference_3_1<_T1, _T2> && requires
{
    typename basic_common_reference<
        remove_cvref_t<_T1>,
        remove_cvref_t<_T2>,
        __xref<_T1>::template type,
        __xref<_T2>::template type>::type;
};

template<typename _T1, typename _T2>
requires __common_reference_3_2<_T1, _T2>
struct common_reference<_T1, _T2>
{
    using type = typename basic_common_reference<
        remove_cvref_t<_T1>,
        remove_cvref_t<_T2>,
        __xref<_T1>::template type,
        __xref<_T2>::template type>::type;
};

template<typename _T1, typename _T2>
concept __common_reference_3_3 =
    !__common_reference_3_1<_T1, _T2> && !__common_reference_3_2<_T1, _T2> && requires
{
    typename __cond_res<_T1, _T2>;
};

template<typename _T1, typename _T2>
requires __common_reference_3_3<_T1, _T2>
struct common_reference<_T1, _T2>
{
    using type = __cond_res<_T1, _T2>;
};

template<typename _T1, typename _T2>
concept __common_reference_3_4 =
    !__common_reference_3_1<
        _T1,
        _T2> && !__common_reference_3_2<_T1, _T2> && !__common_reference_3_3<_T1, _T2> && requires
{
    typename common_type_t<_T1, _T2>;
};

template<typename _T1, typename _T2>
requires __common_reference_3_4<_T1, _T2>
struct common_reference<_T1, _T2>
{
    using type = common_type_t<_T1, _T2>;
};

template<typename _T1, typename _T2>
struct common_reference<_T1, _T2>
{
};

template<typename _T1, typename _T2, typename... _Rest>
concept __common_reference_4_1 = requires
{
    typename common_reference<typename common_reference<_T1, _T2>::type, _Rest...>::type;
};

template<typename _T1, typename _T2, typename _T3, typename... _Rest>
requires __common_reference_4_1<_T1, _T2, _T3, _Rest...>
struct common_reference<_T1, _T2, _T3, _Rest...>
{
    using type = typename common_reference<typename common_reference<_T1, _T2>::type, _T3, _Rest...>::type;
};

template<typename... _All>
struct common_reference
{
};

template<typename _T, bool _IsEnum>
struct __underlying_type_impl
{
    using type = __underlying_type(_T);
};

template<typename _T>
struct __underlying_type_impl<_T, false>
{
};

template<typename _T>
struct underlying_type : __underlying_type_impl<_T, __is_enum(_T)>
{
};

template<typename _Fn, typename... _ArgTypes>
struct invoke_result;

template<typename _T>
struct unwrap_reference
{
    using type = _T;
};

template<typename _T>
class reference_wrapper;

template<typename _T>
struct unwrap_reference<reference_wrapper<_T>>
{
    using type = _T &;
};

template<typename _T>
using type_identity_t = typename type_identity<_T>::type;
template<size_t _Len, size_t _Align = 16> // see [meta.trans.other]
using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;
template<size_t _Len, typename... _Types>
using aligned_union_t = typename aligned_union<_Len, _Types...>::type;
template<typename _T>
using decay_t = typename decay<_T>::type;
template<bool _B, typename _T = void>
using enable_if_t = typename enable_if<_B, _T>::type;
template<bool _B, typename _T, typename _F>
using conditional_t = typename conditional<_B, _T, _F>::type;
template<typename... _T>
using common_reference_t = typename common_reference<_T...>::type;
template<typename _T>
using underlying_type_t = typename underlying_type<_T>::type;
template<typename _Fn, typename... _ArgTypes>
using invoke_result_t = typename invoke_result<_Fn, _ArgTypes...>::type;
template<typename _T>
using unwrap_reference_t = typename unwrap_reference<_T>::type;

template<typename _T>
struct unwrap_ref_decay
{
    using type = unwrap_reference_t<decay_t<_T>>;
};

template<typename _T>
using unwrap_ref_decay_t = typename unwrap_ref_decay<_T>::type;

template<typename...>
using void_t = void;

template<typename... _B>
struct conjunction;

template<typename _Head, typename... _Tail>
struct conjunction<_Head, _Tail...> : conditional_t<_Head::value, conjunction<_Tail...>, _Head>
{
};

template<typename _Last>
struct conjunction<_Last> : _Last
{
};

template<typename... _B>
struct disjunction;
template<typename _B>
struct negation;

template<typename _T>
inline constexpr bool is_void_v = is_void<_T>::value;
template<typename _T>
inline constexpr bool is_null_pointer_v = is_null_pointer<_T>::value;
template<typename _T>
inline constexpr bool is_integral_v = is_integral<_T>::value;
template<typename _T>
inline constexpr bool is_floating_point_v = is_floating_point<_T>::value;
template<typename _T>
inline constexpr bool is_array_v = is_array<_T>::value;
template<typename _T>
inline constexpr bool is_pointer_v = is_pointer<_T>::value;
template<typename _T>
inline constexpr bool is_lvalue_reference_v = is_lvalue_reference<_T>::value;
template<typename _T>
inline constexpr bool is_rvalue_reference_v = is_rvalue_reference<_T>::value;
template<typename _T>
inline constexpr bool is_member_object_pointer_v = is_member_object_pointer<_T>::value;
template<typename _T>
inline constexpr bool is_member_function_pointer_v = is_member_function_pointer<_T>::value;
template<typename _T>
inline constexpr bool is_enum_v = is_enum<_T>::value;
template<typename _T>
inline constexpr bool is_union_v = is_union<_T>::value;
template<typename _T>
inline constexpr bool is_class_v = is_class<_T>::value;
template<typename _T>
inline constexpr bool is_function_v = is_function<_T>::value;

template<typename _T>
inline constexpr bool is_reference_v = is_reference<_T>::value;
template<typename _T>
inline constexpr bool is_arithmetic_v = is_arithmetic<_T>::value;
template<typename _T>
inline constexpr bool is_fundamental_v = is_fundamental<_T>::value;
template<typename _T>
inline constexpr bool is_object_v = is_object<_T>::value;
template<typename _T>
inline constexpr bool is_scalar_v = is_scalar<_T>::value;
template<typename _T>
inline constexpr bool is_compound_v = is_compound<_T>::value;
template<typename _T>
inline constexpr bool is_member_pointer_v = is_member_pointer<_T>::value;

template<typename _T>
inline constexpr bool is_const_v = is_const<_T>::value;
template<typename _T>
inline constexpr bool is_volatile_v = is_volatile<_T>::value;
template<typename _T>
inline constexpr bool is_trivial_v = is_trivial<_T>::value;
template<typename _T>
inline constexpr bool is_trivially_copyable_v = is_trivially_copyable<_T>::value;
template<typename _T>
inline constexpr bool is_standard_layout_v = is_standard_layout<_T>::value;
template<typename _T>
inline constexpr bool is_empty_v = is_empty<_T>::value;
template<typename _T>
inline constexpr bool is_polymorphic_v = is_polymorphic<_T>::value;
template<typename _T>
inline constexpr bool is_abstract_v = is_abstract<_T>::value;
template<typename _T>
inline constexpr bool is_final_v = is_final<_T>::value;
template<typename _T>
inline constexpr bool is_aggregate_v = is_aggregate<_T>::value;
template<typename _T>
inline constexpr bool is_signed_v = is_signed<_T>::value;
template<typename _T>
inline constexpr bool is_unsigned_v = is_unsigned<_T>::value;
template<typename _T>
inline constexpr bool is_bounded_array_v = is_bounded_array<_T>::value;
template<typename _T>
inline constexpr bool is_unbounded_array_v = is_unbounded_array<_T>::value;
template<typename _T>
inline constexpr bool is_scoped_enum_v = is_scoped_enum<_T>::value;
template<typename _T, typename... _Args>
inline constexpr bool is_constructible_v = is_constructible<_T, _Args...>::value;
template<typename _T>
inline constexpr bool is_default_constructible_v = is_default_constructible<_T>::value;
template<typename _T>
inline constexpr bool is_copy_constructible_v = is_copy_constructible<_T>::value;
template<typename _T>
inline constexpr bool is_move_constructible_v = is_move_constructible<_T>::value;
template<typename _T, typename _U>
inline constexpr bool is_assignable_v = is_assignable<_T, _U>::value;
template<typename _T>
inline constexpr bool is_copy_assignable_v = is_copy_assignable<_T>::value;
template<typename _T>
inline constexpr bool is_move_assignable_v = is_move_assignable<_T>::value;
template<typename _T, typename _U>
inline constexpr bool is_swappable_with_v = is_swappable_with<_T, _U>::value;
template<typename _T>
inline constexpr bool is_swappable_v = is_swappable<_T>::value;
template<typename _T>
inline constexpr bool is_destructible_v = is_destructible<_T>::value;
template<typename _T, typename... _Args>
inline constexpr bool is_trivially_constructible_v = is_trivially_constructible<_T, _Args...>::value;
template<typename _T>
inline constexpr bool is_trivially_default_constructible_v = is_trivially_default_constructible<_T>::value;
template<typename _T>
inline constexpr bool is_trivially_copy_constructible_v = is_trivially_copy_constructible<_T>::value;
template<typename _T>
inline constexpr bool is_trivially_move_constructible_v = is_trivially_move_constructible<_T>::value;
template<typename _T, typename _U>
inline constexpr bool is_trivially_assignable_v = is_trivially_assignable<_T, _U>::value;
template<typename _T>
inline constexpr bool is_trivially_copy_assignable_v = is_trivially_copy_assignable<_T>::value;
template<typename _T>
inline constexpr bool is_trivially_move_assignable_v = is_trivially_move_assignable<_T>::value;
template<typename _T>
inline constexpr bool is_trivially_destructible_v = is_trivially_destructible<_T>::value;
template<typename _T, typename... _Args>
inline constexpr bool is_nothrow_constructible_v = is_nothrow_constructible<_T, _Args...>::value;
template<typename _T>
inline constexpr bool is_nothrow_default_constructible_v = is_nothrow_default_constructible<_T>::value;
template<typename _T>
inline constexpr bool is_nothrow_copy_constructible_v = is_nothrow_copy_constructible<_T>::value;
template<typename _T>
inline constexpr bool is_nothrow_move_constructible_v = is_nothrow_move_constructible<_T>::value;
template<typename _T, typename _U>
inline constexpr bool is_nothrow_assignable_v = is_nothrow_assignable<_T, _U>::value;
template<typename _T>
inline constexpr bool is_nothrow_copy_assignable_v = is_nothrow_copy_assignable<_T>::value;
template<typename _T>
inline constexpr bool is_nothrow_move_assignable_v = is_nothrow_move_assignable<_T>::value;
template<typename _T, typename _U>
inline constexpr bool is_nothrow_swappable_with_v = is_nothrow_swappable_with<_T, _U>::value;
template<typename _T>
inline constexpr bool is_nothrow_swappable_v = is_nothrow_swappable<_T>::value;
template<typename _T>
inline constexpr bool is_nothrow_destructible_v = is_nothrow_destructible<_T>::value;
template<typename _T>
inline constexpr bool has_virtual_destructor_v = has_virtual_destructor<_T>::value;
template<typename _T>
inline constexpr bool has_unique_object_representations_v = has_unique_object_representations<_T>::value;

template<typename _T>
inline constexpr size_t alignment_of_v = alignment_of<_T>::value;
template<typename _T>
inline constexpr size_t rank_v = rank<_T>::value;
template<typename _T, unsigned _I = 0>
inline constexpr size_t extent_v = extent<_T, _I>::value;

template<typename _T, typename _U>
inline constexpr bool is_same_v = is_same<_T, _U>::value;
template<typename _Base, typename _Derived>
inline constexpr bool is_base_of_v = is_base_of<_Base, _Derived>::value;
template<typename _From, typename _To>
inline constexpr bool is_convertible_v = is_convertible<_From, _To>::value;
template<typename _From, typename _To>
inline constexpr bool is_nothrow_convertible_v = is_nothrow_convertible<_From, _To>::value;
template<typename _T, typename _U>
inline constexpr bool is_layout_compatible_v = is_layout_compatible<_T, _U>::value;
template<typename _Base, typename _Derived>
inline constexpr bool is_pointer_interconvertible_base_of_v =
    is_pointer_interconvertible_base_of<_Base, _Derived>::value;
template<typename _Fn, typename... _ArgTypes>
inline constexpr bool is_invocable_v = is_invocable<_Fn, _ArgTypes...>::value;
template<typename _R, typename _Fn, typename... _ArgTypes>
inline constexpr bool is_invocable_r_v = is_invocable_r<_R, _Fn, _ArgTypes...>::value;
template<typename _Fn, typename... _ArgTypes>
inline constexpr bool is_nothrow_invocable_v = is_nothrow_invocable<_Fn, _ArgTypes...>::value;
template<typename _R, typename _Fn, typename... _ArgTypes>
inline constexpr bool is_nothrow_invocable_r_v = is_nothrow_invocable_r<_R, _Fn, _ArgTypes...>::value;

template<class... _B>
inline constexpr bool conjunction_v = conjunction<_B...>::value;
template<class... _B>
inline constexpr bool disjunction_v = disjunction<_B...>::value;
template<typename _B>
inline constexpr bool negation_v = negation<_B>::value;

template<typename _S, typename _M>
constexpr bool is_pointer_interconvertible_with_class(_M _S::*__m) noexcept;
template<typename _S1, typename _S2, typename _M1, typename _M2>
constexpr bool is_corresponding_member(_M1 _S1::*__m1, _M2 _S2::*__m2) noexcept;

constexpr bool is_constant_evaluated() noexcept;

__ROSESTD_CLOSE

// vim: ft=cpp
